{"version":3,"sources":["component/menu/edit.tsx","component/menu/index.tsx","container/menu/index.tsx","actions/menu.ts"],"names":["Edit","props","handleFrom","name","value","formValue","setState","handleUpdate","trim","Alert","error","state","show","Drawer","this","onHide","onClose","size","Header","Title","title","Body","Form","fluid","FormGroup","ControlLabel","FormControl","onChange","e","SelectPicker","data","menu","searchable","block","RadioGroup","inline","type","Radio","Footer","Button","onClick","appearance","React","Component","Brand","add","close","modify","onModify","setTimeout","page","bind","getList","prevProps","prevState","snapshot","update","Column","Table","HeaderCell","Cell","Pagination","id","color","Icon","icon","Divider","loading","list","style","marginLeft","marginRight","width","align","fixed","dataKey","flexGrow","rowData","className","vertical","href","total","lengthMenu","label","activePage","displayLength","renderTotal","withRouter","connect","Menu","del","dispatch","pageSize","GET_MENU_LIST","getListAction","onUpdate","editType","UPDATE_MENU","updateAction","onDel","DELETE_MENU","deleteAction","MODIFY_MENU","modifyAction"],"mappings":"gVAqBqBA,E,YACjB,WAAYC,GAA0B,IAAD,8BACjC,4CAAMA,KAOVC,WAAa,SAACC,EAAcC,GACxB,IAAIC,EAAY,EAAKJ,MAAMI,UAC3BA,EAAUF,GAAQC,EAClB,EAAKE,SAAS,CACVD,UAAWA,KAZkB,EAiBrCE,aAAe,WAGX,IADa,EAAKN,MAAMI,UAAUF,KAAKK,OAGnC,OADAC,IAAMC,MAAM,qDACL,GApBX,EAAKC,MAAQ,CACTC,MAAM,EACNP,UAAW,IAJkB,E,sEA0B3B,IAAD,OACL,OACI,kBAACQ,EAAA,EAAD,CACID,KAAME,KAAKb,MAAMW,KACjBG,OAAQD,KAAKb,MAAMe,QACnBC,KAAK,MAEL,kBAACJ,EAAA,EAAOK,OAAR,KACI,kBAACL,EAAA,EAAOM,MAAR,KAAeL,KAAKb,MAAMmB,QAE9B,kBAACP,EAAA,EAAOQ,KAAR,KACI,kBAACC,EAAA,EAAD,CAAMC,OAAK,GACP,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,iCACA,kBAACC,EAAA,EAAD,CAAavB,KAAK,OAAOC,MAAOU,KAAKb,MAAMI,UAAUF,KAAMwB,SAAU,SAACC,GAClE,EAAK1B,WAAW,OAAQ0B,OAGhC,kBAACJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,iCACA,kBAACI,EAAA,EAAD,CAAcC,KAAMhB,KAAKb,MAAMI,UAAU0B,KAAMC,YAAY,EAAOC,OAAO,KAE7E,kBAACT,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,iCACA,kBAACS,EAAA,EAAD,CAAYC,QAAM,EAAC/B,MAAOU,KAAKb,MAAMI,UAAU+B,KAAMT,SAAU,SAAAvB,GAC3D,EAAKF,WAAW,OAAQE,KAExB,kBAACiC,EAAA,EAAD,CAAOjC,MAAM,SAAb,4BACA,kBAACiC,EAAA,EAAD,CAAOjC,MAAM,QAAb,4BACA,kBAACiC,EAAA,EAAD,CAAOjC,MAAM,eAAb,oCAGR,kBAACoB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,2BACA,kBAACC,EAAA,EAAD,CAAavB,KAAK,OAAOC,MAAOU,KAAKb,MAAMI,UAAUF,KAAMwB,SAAU,SAACC,GAClE,EAAK1B,WAAW,OAAQ0B,OAGhC,kBAACJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,iCACA,kBAACC,EAAA,EAAD,CAAavB,KAAK,OAAOC,MAAOU,KAAKb,MAAMI,UAAUF,KAAMwB,SAAU,SAACC,GAClE,EAAK1B,WAAW,OAAQ0B,SAKxC,kBAACf,EAAA,EAAOyB,OAAR,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAS1B,KAAKb,MAAMe,QAASyB,WAAW,WAAhD,gBACA,kBAACF,EAAA,EAAD,CAAQC,QAAS1B,KAAKb,MAAMe,QAASyB,WAAW,UAAhD,sB,GA3EcC,IAAMC,WCLnBC,E,YACjB,WAAY3C,GAA0B,IAAD,8BACjC,4CAAMA,KAmBV4C,IAAM,WACF,EAAKvC,SAAS,CACVM,MAAM,KAtBuB,EA0BrCkC,MAAQ,WACJ,IAAIC,EAAS,EAAK9C,MAAM+C,SACxB,EAAK1C,SAAS,CACVM,MAAM,IACP,WACCqC,YAAW,WACPF,EAAO,CAAC,GAAM,EAAG,KAAQ,OAC1B,SA/BP,EAAKpC,MAAQ,CACTC,MAAM,EACNQ,MAAO,2BACP8B,KAAM,GAEV,EAAKL,IAAM,EAAKA,IAAIM,KAAT,gBAPsB,E,iFAWjCrC,KAAKb,MAAMmD,QAAQ,EAAG,M,yCAGPC,EAA6BC,EAA0BC,IACjEF,EAAUG,QAAU1C,KAAKb,MAAMuD,QAChC1C,KAAKgC,U,+BAqBH,IAAD,OACEW,EAAwCC,IAAxCD,OAAQE,EAAgCD,IAAhCC,WAAYC,EAAoBF,IAApBE,KAAMC,EAAcH,IAAdG,WAUjC,OACI,yBAAKC,GAAG,QACJ,kBAAC,EAAD,CAAMlD,KAAME,KAAKH,MAAMC,KAAMI,QAASF,KAAKgC,MAAO1B,MAAON,KAAKH,MAAMS,MAC9Df,UAAWS,KAAKb,MAAMI,YAC5B,kBAACkC,EAAA,EAAD,CAAQwB,MAAM,SAASvB,QAAS1B,KAAK+B,KACjC,kBAACmB,EAAA,EAAD,CAAMC,KAAK,SADf,6BAGA,kBAAC1B,EAAA,EAAD,CAAQwB,MAAM,MAAMvB,QAAS1B,KAAK+B,KAC9B,kBAACmB,EAAA,EAAD,CAAMC,KAAK,WADf,6BAGA,kBAACC,EAAA,EAAD,MACA,kBAACR,EAAA,EAAD,CAAOS,SAAS,EAAOrC,KAAMhB,KAAKb,MAAMmE,KAAMC,MAAO,CAACC,WAAY,GAAIC,YAAa,KAC/E,kBAACd,EAAD,CAAQe,MAAO,GAAIC,MAAM,SAASC,OAAK,GACnC,kBAACf,EAAD,WACA,kBAACC,EAAD,CAAMe,QAAQ,QAElB,kBAAClB,EAAD,CAAQmB,SAAU,GACd,kBAACjB,EAAD,iCACA,kBAACC,EAAD,CAAMe,QAAQ,UAElB,kBAAClB,EAAD,CAAQmB,SAAU,GACd,kBAACjB,EAAD,qBACA,kBAACC,EAAD,CAAMe,QAAQ,WAElB,kBAAClB,EAAD,CAAQmB,SAAU,GACd,kBAACjB,EAAD,iCACA,kBAACC,EAAD,CAAMe,QAAQ,UAElB,kBAAClB,EAAD,CAAQmB,SAAU,GACd,kBAACjB,EAAD,iCACA,kBAACC,EAAD,CAAMe,QAAQ,cAElB,kBAAClB,EAAD,CAAQmB,SAAU,GACd,kBAACjB,EAAD,MACA,mBA3CG,SAAC,GAAsC,EAArCkB,QAAqC,EAA5BF,QAA6B,IAAjB1E,EAAgB,qCACtD,OACI,kBAAC2D,EAAD,iBAAU3D,EAAV,CAAiB6E,UAAU,eACvB,2CACA,kBAACZ,EAAA,EAAD,CAASa,UAAQ,IACjB,uBAAGC,KAAK,IAAR,mBAsCI,CAAYL,QAAQ,SAIxB7D,KAAKb,MAAMgF,MAAQ,EAAI,kBAACpB,EAAD,CACnBqB,WAAY,CACR,CACI9E,MAAO,GACP+E,MAAO,IAEX,CACI/E,MAAO,GACP+E,MAAO,KAGfC,WAAYtE,KAAKH,MAAMuC,KACvBmC,cAAe,GACfJ,MAAOnE,KAAKb,MAAMgF,MAClBK,YAAa,WACT,OAAO,6CAAS,EAAK3E,MAAMsE,UAE9B,Q,GAxGUvC,IAAMC,W,mBCK1B4C,sBAAWC,aAfF,SAAC7E,GAAD,MAAiB,CACrCyD,KAAMzD,EAAM8E,KAAKrB,KACjBa,MAAOtE,EAAM8E,KAAKR,MAClBzB,OAAQ7C,EAAM8E,KAAKjC,OACnBkC,IAAK/E,EAAM8E,KAAKC,IAChBrF,UAAWM,EAAM8E,KAAKpF,cAGC,SAACsF,GAAD,MAAyB,CAChDvC,QAAS,SAACF,EAAc0C,GAAf,OAAoCD,ECHjD,SAAuBzC,EAAc0C,GACjC,MAAO,CACHxD,KAAMyD,IACN3C,OACA0C,YDDkDE,CAAc5C,EAAM0C,KAC1EG,SAAU,SAACjC,EAAY3D,EAAciC,GAA3B,OAA4CuD,ECI1D,SAAsB7B,EAAY3D,EAAc6F,GAC5C,MAAO,CACH5D,KAAM6D,KACNnC,KACA3D,OACA6F,YDT2DE,CAAapC,EAAI3D,EAAMiC,KACtF+D,MAAO,SAACrC,EAAY1B,GAAb,OAA8BuD,ECYzC,SAAsB7B,EAAYkC,GAC9B,MAAO,CACH5D,KAAMgE,IACNtC,KACAkC,YDhB0CK,CAAavC,EAAI1B,KAC/DY,SAAU,SAAC3C,GAAD,OAAoBsF,ECmBlC,SAAsBtF,GAClB,MAAO,CACH+B,KAAMkE,IACNjG,aDtBmCkG,CAAalG,QAG9BmF,CAA6CC","file":"static/js/12.bb8dd0ab.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n    Drawer,\n    Button,\n    FormGroup,\n    ControlLabel,\n    FormControl,\n    Form,\n    Alert,\n    RadioGroup,\n    Radio,\n    SelectPicker\n} from \"rsuite\";\n\nexport interface IProps {\n    show: boolean,\n    title: string,\n    formValue: any,\n    onClose: () => void,\n}\n\nexport default class Edit extends React.Component<IProps, any> {\n    constructor(props: Readonly<IProps>) {\n        super(props);\n        this.state = {\n            show: true,\n            formValue: \"\"\n        }\n    }\n\n    handleFrom = (name: string, value: string) => {\n        let formValue = this.props.formValue\n        formValue[name] = value\n        this.setState({\n            formValue: formValue\n        })\n        // this.props.onModify(formValue)\n    }\n\n    handleUpdate = () => {\n        // const id = this.props.formValue.id\n        const name = this.props.formValue.name.trim()\n        if (!name) {\n            Alert.error(\"性质名称不能为空\")\n            return false\n        }\n    }\n\n    render() {\n        return (\n            <Drawer\n                show={this.props.show}\n                onHide={this.props.onClose}\n                size=\"xs\"\n            >\n                <Drawer.Header>\n                    <Drawer.Title>{this.props.title}</Drawer.Title>\n                </Drawer.Header>\n                <Drawer.Body>\n                    <Form fluid>\n                        <FormGroup>\n                            <ControlLabel>菜单名称</ControlLabel>\n                            <FormControl name=\"name\" value={this.props.formValue.name} onChange={(e) => {\n                                this.handleFrom(\"name\", e)\n                            }}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>上级菜单</ControlLabel>\n                            <SelectPicker data={this.props.formValue.menu} searchable={false} block={true}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>菜单类型</ControlLabel>\n                            <RadioGroup inline value={this.props.formValue.type} onChange={value => {\n                                this.handleFrom(\"type\", value)\n                            }}>\n                                <Radio value=\"click\">发送消息</Radio>\n                                <Radio value=\"view\">跳转网页</Radio>\n                                <Radio value=\"miniprogram\">跳转小程序</Radio>\n                            </RadioGroup>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>小程序</ControlLabel>\n                            <FormControl name=\"name\" value={this.props.formValue.name} onChange={(e) => {\n                                this.handleFrom(\"name\", e)\n                            }}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>跳转地址</ControlLabel>\n                            <FormControl name=\"name\" value={this.props.formValue.name} onChange={(e) => {\n                                this.handleFrom(\"name\", e)\n                            }}/>\n                        </FormGroup>\n                    </Form>\n                </Drawer.Body>\n                <Drawer.Footer>\n                    <Button onClick={this.props.onClose} appearance=\"primary\">提交</Button>\n                    <Button onClick={this.props.onClose} appearance=\"subtle\">取消</Button>\n                </Drawer.Footer>\n            </Drawer>\n        )\n    }\n}","import React from \"react\";\nimport {Button, Divider, Icon, Table} from \"rsuite\";\nimport \"../../sass/menu.scss\"\nimport Edit from \"./edit\";\n\nexport interface IProps {\n    list: any\n    total: number\n    update: boolean\n    formValue: any\n    getList: (page: number, pageSize: number) => void\n    onUpdate: (id: number, name: string, type: string) => void\n    onDel: (id: number, type: string) => void,\n    onModify: (formValue: any) => void,\n}\n\nexport default class Brand extends React.Component<IProps, any> {\n    constructor(props: Readonly<IProps>) {\n        super(props)\n        this.state = {\n            show: true,\n            title: \"添加菜单\",\n            page: 1\n        }\n        this.add = this.add.bind(this)\n    }\n\n    componentDidMount(): void {\n        this.props.getList(0, 20)\n    }\n\n    componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<any>, snapshot?: any): void {\n        if (!prevProps.update && this.props.update) {\n            this.close()\n        }\n    }\n\n    add = () => {\n        this.setState({\n            show: true,\n        })\n    }\n\n    close = () => {\n        let modify = this.props.onModify\n        this.setState({\n            show: false\n        }, function () {\n            setTimeout(function () {\n                modify({\"id\": 0, \"name\": \"\"})\n            }, 500)\n        })\n    }\n\n    render() {\n        const {Column, HeaderCell, Cell, Pagination} = Table;\n        const ActionCell = ({rowData, dataKey, ...props}: any) => {\n            return (\n                <Cell {...props} className=\"link-group\">\n                    <a>编辑</a>\n                    <Divider vertical/>\n                    <a href=\"\">删除</a>\n                </Cell>\n            );\n        };\n        return (\n            <div id=\"page\">\n                <Edit show={this.state.show} onClose={this.close} title={this.state.title}\n                      formValue={this.props.formValue}/>\n                <Button color=\"orange\" onClick={this.add}>\n                    <Icon icon=\"plus\"/> 新增菜单\n                </Button>\n                <Button color=\"red\" onClick={this.add}>\n                    <Icon icon=\"upload\"/> 更新菜单\n                </Button>\n                <Divider/>\n                <Table loading={false} data={this.props.list} style={{marginLeft: 25, marginRight: 25}}>\n                    <Column width={50} align=\"center\" fixed>\n                        <HeaderCell>ID</HeaderCell>\n                        <Cell dataKey=\"id\"/>\n                    </Column>\n                    <Column flexGrow={5}>\n                        <HeaderCell>菜单名称</HeaderCell>\n                        <Cell dataKey=\"name\"/>\n                    </Column>\n                    <Column flexGrow={1}>\n                        <HeaderCell>排序</HeaderCell>\n                        <Cell dataKey=\"order\"/>\n                    </Column>\n                    <Column flexGrow={3}>\n                        <HeaderCell>跳转类型</HeaderCell>\n                        <Cell dataKey=\"type\"/>\n                    </Column>\n                    <Column flexGrow={3}>\n                        <HeaderCell>跳转地址</HeaderCell>\n                        <Cell dataKey=\"pagepath\"/>\n                    </Column>\n                    <Column flexGrow={6}>\n                        <HeaderCell></HeaderCell>\n                        <ActionCell dataKey=\"id\"/>\n                    </Column>\n                </Table>\n                {\n                    this.props.total > 0 ? <Pagination\n                        lengthMenu={[\n                            {\n                                value: 10,\n                                label: 10\n                            },\n                            {\n                                value: 20,\n                                label: 20\n                            }\n                        ]}\n                        activePage={this.state.page}\n                        displayLength={20}\n                        total={this.props.total}\n                        renderTotal={() => {\n                            return <div>总数:{this.state.total}</div>\n                        }}\n                    /> : \"\"\n                }\n            </div>\n        )\n    }\n}","import {withRouter} from \"react-router\"\nimport Menu from \"../../component/menu\";\nimport {Dispatch} from \"redux\";\nimport {deleteAction, getListAction, updateAction, modifyAction} from \"../../actions/menu\";\nimport {connect} from \"react-redux\";\n\nconst mapStateToProps = (state: any) => ({\n    list: state.Menu.list,\n    total: state.Menu.total,\n    update: state.Menu.update,\n    del: state.Menu.del,\n    formValue: state.Menu.formValue\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    getList: (page: number, pageSize: number) => dispatch(getListAction(page, pageSize)),\n    onUpdate: (id: number, name: string, type: string) => dispatch(updateAction(id, name, type)),\n    onDel: (id: number, type: string) => dispatch(deleteAction(id, type)),\n    onModify: (formValue: any) => dispatch(modifyAction(formValue))\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Menu))","import {DELETE_MENU, GET_MENU_LIST, MODIFY_MENU, UPDATE_MENU} from \"../constants/actions\";\n\nexport interface menu {\n    type: string\n    list: any,\n    total: number,\n    update: boolean,\n    del: boolean,\n    formValue: any\n}\n\n\nfunction getListAction(page: number, pageSize: number) {\n    return {\n        type: GET_MENU_LIST,\n        page,\n        pageSize,\n    }\n}\n\nfunction updateAction(id: number, name: string, editType: string) {\n    return {\n        type: UPDATE_MENU,\n        id,\n        name,\n        editType,\n    }\n}\n\nfunction deleteAction(id: number, editType: string) {\n    return {\n        type: DELETE_MENU,\n        id,\n        editType,\n    }\n}\n\nfunction modifyAction(formValue: any) {\n    return {\n        type: MODIFY_MENU,\n        formValue\n    }\n}\n\nexport {\n    getListAction,\n    updateAction,\n    deleteAction,\n    modifyAction\n}"],"sourceRoot":""}