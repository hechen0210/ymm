{"version":3,"sources":["actions/area.ts","component/data/index.tsx","container/data/index.ts","actions/data.ts"],"names":["getListAction","page","pageSize","type","GET_AREA_LIST","updateAction","id","name","editType","UPDATE_AREA","deleteAction","DELETE_AREA","modifyAction","formValue","MODIFY_AREA","getAreaAll","ALL_AREA","Data","props","handleForm","data","condition","moment","format","add","setState","setCondition","state","this","getAreaList","getList","Column","Table","HeaderCell","Cell","Pagination","style","padding","Form","layout","FormGroup","ControlLabel","SelectPicker","areaList","width","marginLeft","searchable","onChange","e","DateRangePicker","Button","className","appearance","onClick","Divider","loading","list","marginRight","autoHeight","align","fixed","dataKey","flexGrow","total","activePage","displayLength","renderLengthMenu","onChangePage","React","Component","withRouter","connect","Area","dispatch","GET_DATA_LIST","SET_CONDITION","setConditionAction"],"mappings":"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","file":"static/js/11.f6ff48a4.chunk.js","sourcesContent":["import {ALL_AREA, DELETE_AREA, GET_AREA_LIST, MODIFY_AREA, UPDATE_AREA} from \"../constants/actions\";\n\nexport interface area {\n    type: string\n    list: any,\n    total: number,\n    update: boolean,\n    del: boolean,\n    formValue: any\n}\n\n\nfunction getListAction(page: number, pageSize: number) {\n    return {\n        type: GET_AREA_LIST,\n        page,\n        pageSize,\n    }\n}\n\nfunction updateAction(id: number, name: string, editType: string) {\n    return {\n        type: UPDATE_AREA,\n        id,\n        name,\n        editType,\n    }\n}\n\nfunction deleteAction(id: number, editType: string) {\n    return {\n        type: DELETE_AREA,\n        id,\n        editType,\n    }\n}\n\nfunction modifyAction(formValue: any) {\n    return {\n        type: MODIFY_AREA,\n        formValue\n    }\n}\n\nfunction getAreaAll() {\n    return {\n        type: ALL_AREA\n    }\n}\n\nexport {\n    getListAction,\n    updateAction,\n    deleteAction,\n    modifyAction,\n    getAreaAll,\n}","import React from \"react\";\nimport \"../../sass/data.scss\"\nimport {Divider, Table, Form, FormGroup, SelectPicker, ControlLabel, DateRangePicker, Button} from \"rsuite\";\nimport {dataCondition} from \"../../actions/data\";\nimport moment from 'moment'\n\nexport interface IProps {\n    list: any\n    total: number\n    condition: any\n    areaList: any,\n    getAreaList: () => void,\n    getList: (condition: dataCondition, page: number, pageSize: number) => void\n    setCondition: (condition: dataCondition) => void\n}\n\nexport default class Data extends React.Component<IProps, any> {\n    constructor(props: Readonly<IProps>) {\n        super(props);\n        this.state = {\n            page: 1,\n            condition: \"\",\n            data: []\n        }\n    }\n\n    componentDidMount(): void {\n        this.props.getAreaList()\n        this.props.getList(this.props.condition, this.state.page, 20)\n    }\n\n    handleForm = (name: string, data: any) => {\n        let condition = this.props.condition\n        if (name === \"date\") {\n            condition[\"start_time\"] = moment(data[0]).format('YYYY-MM-DD 00:00:00')\n            condition[\"end_time\"] = moment(data[1]).add(\"days\", 1).format('YYYY-MM-DD 00:00:00')\n        } else {\n            condition[name] = data\n        }\n        this.setState({\n            condition: condition\n        })\n        this.props.setCondition(condition)\n    }\n\n    render() {\n        const {Column, HeaderCell, Cell, Pagination} = Table;\n        return (\n            <div id=\"page\">\n                <div style={{padding: \"24px 0 0 24px\"}}>\n                    <Form layout=\"inline\">\n                        <FormGroup>\n                            <ControlLabel>区域</ControlLabel>\n                            <SelectPicker\n                                data={this.props.areaList}\n                                style={{width: 224, marginLeft: 10}}\n                                searchable={false} onChange={(e) => {\n                                this.handleForm(\"area\", e)\n                            }}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>日期</ControlLabel>\n                            <DateRangePicker\n                                style={{marginLeft: 10}}\n                                onChange={(e) => {\n                                    this.handleForm(\"date\", e)\n                                }}\n                            />\n                        </FormGroup>\n                        <Button className=\"form-button\" appearance=\"primary\" onClick={() => {\n                            this.props.getList(this.props.condition, 0, 20)\n                        }}>查询</Button>\n                    </Form>\n                </div>\n                <Divider/>\n                <Table loading={false} data={this.props.list} style={{marginLeft: 25, marginRight: 25}}\n                       autoHeight={true}>\n                    <Column width={50} align=\"center\" fixed>\n                        <HeaderCell>ID</HeaderCell>\n                        <Cell dataKey=\"id\"/>\n                    </Column>\n                    <Column flexGrow={4}>\n                        <HeaderCell>区域名称</HeaderCell>\n                        <Cell dataKey=\"area\"/>\n                    </Column>\n                    <Column flexGrow={3}>\n                        <HeaderCell>关注人数</HeaderCell>\n                        <Cell dataKey=\"sub_num\"/>\n                    </Column>\n                    <Column flexGrow={3}>\n                        <HeaderCell>取消关注人数</HeaderCell>\n                        <Cell dataKey=\"unsub_num\"/>\n                    </Column>\n                    <Column flexGrow={3}>\n                        <HeaderCell>总关注人数</HeaderCell>\n                        <Cell dataKey=\"total\"/>\n                    </Column>\n                </Table>\n                {\n                    this.props.total > 0 ? <Pagination\n                        activePage={this.state.page}\n                        displayLength={20}\n                        total={this.props.total}\n                        renderLengthMenu={() => {\n                            return \"\"\n                        }}\n                        onChangePage={page => {\n                            this.props.getList(this.props.condition, page, 20)\n                            this.setState({\n                                page: page\n                            })\n                        }}\n                    /> : \"\"\n                }\n            </div>\n        )\n    }\n}","import {withRouter} from \"react-router\"\nimport Data from \"../../component/data\";\nimport {Dispatch} from \"redux\";\nimport {getListAction, setConditionAction} from \"../../actions/data\";\nimport {connect} from \"react-redux\";\nimport {dataCondition} from \"../../actions/data\";\nimport {getAreaAll} from \"../../actions/area\";\n\nconst mapStateToProps = (state: any) => ({\n    list: state.Data.list,\n    total: state.Data.total,\n    condition: state.Data.condition,\n    areaList: state.Area.list\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    getAreaList: () => dispatch(getAreaAll()),\n    getList: (condition: dataCondition, page: number, pageSize: number) => dispatch(getListAction(condition, page, pageSize)),\n    setCondition: (condition: dataCondition) => dispatch(setConditionAction(condition))\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Data))","import {GET_DATA_LIST, SET_CONDITION} from \"../constants/actions\";\n\nexport interface dataCondition {\n    area: string\n    start_time: string\n    end_time: string\n}\n\nexport interface data {\n    type: string\n    list: any\n    total: number\n    condition: dataCondition\n}\n\nfunction getListAction(condition: dataCondition, page: number, pageSize: number) {\n    return {\n        type: GET_DATA_LIST,\n        condition,\n        page,\n        pageSize\n    }\n}\n\nfunction setConditionAction(condition: dataCondition) {\n    return {\n        type: SET_CONDITION,\n        condition\n    }\n}\n\nexport {\n    getListAction,\n    setConditionAction\n}"],"sourceRoot":""}