{"version":3,"sources":["component/keyWords/keyWordsEdit.tsx","component/keyWords/keyWordsInfo.tsx","component/keyWords/index.tsx","container/replay/keyWords.ts","actions/keyWords.ts"],"names":["KeyWordsEdit","props","handleFrom","name","value","formValue","setState","onModify","handleUpdate","trim","keyWords","key_words","content","onUpdate","Alert","error","state","show","matchType","label","match","Drawer","this","onHide","onClose","size","Header","Title","title","Body","Form","fluid","FormGroup","ControlLabel","FormControl","onChange","e","className","Whisper","placement","trigger","speaker","Tooltip","Button","color","onClick","push","map","item","index","key","style","marginBottom","inputList","newInput","slice","SelectPicker","data","defaultValue","toString","searchable","block","cleanable","words","RadioGroup","inline","reply_type","Radio","Footer","appearance","React","Component","KeyWordsInfo","info","display","Index","add","close","modify","setTimeout","initState","closeInfo","showInfo","page","bind","getList","prevProps","prevState","snapshot","update","Column","Table","HeaderCell","Cell","Pagination","id","Icon","icon","Divider","loading","list","marginLeft","marginRight","autoHeight","width","align","fixed","dataKey","flexGrow","rowData","forEach","length","substr","role","split","vertical","onDel","total","activePage","displayLength","renderLengthMenu","renderTotal","onChangePage","withRouter","connect","KeyWords","del","dispatch","type","pageSize","replyType","GET_KEY_WORDS_LIST","getListAction","UPDATE_KEY_WORDS","updateAction","editType","DELETE_KEY_WORDS","deleteAction","MODIFY_KEY_WORDS","modifyAction"],"mappings":"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","file":"static/js/9.248e0260.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n    Drawer,\n    Button,\n    FormGroup,\n    ControlLabel,\n    FormControl,\n    Form,\n    Alert,\n    RadioGroup,\n    Radio,\n    SelectPicker,\n    Whisper,\n    Tooltip\n} from \"rsuite\";\n\nexport interface IProps {\n    show: boolean,\n    title: string,\n    formValue: any,\n    onClose: () => void,\n    onUpdate: (formValue: any) => void,\n    onModify: (formValue: any) => void,\n}\n\nexport default class KeyWordsEdit extends React.Component<IProps, any> {\n    constructor(props: Readonly<IProps>) {\n        super(props);\n        this.state = {\n            show: true,\n            matchType: [\n                {\n                    label: '半匹配',\n                    value: '1',\n                }, {\n                    label: '全匹配',\n                    value: '2',\n                }\n            ],\n            formValue: \"\",\n            match: \"1\",\n        }\n    }\n\n    handleFrom = (name: string, value: any) => {\n        let formValue = this.props.formValue\n        formValue[name] = value\n        formValue[\"type\"] = \"key_words\"\n        this.setState({\n            formValue: formValue\n        })\n        this.props.onModify(formValue)\n    }\n\n    handleUpdate = () => {\n        const name = this.props.formValue.name.trim()\n        const keyWords = this.props.formValue.key_words\n        const content = this.props.formValue.content\n        if (!name) {\n            Alert.error(\"规则名称不能为空\")\n            return false\n        }\n        if (!keyWords[0]) {\n            Alert.error(\"关键词不能为空\")\n            return false\n        }\n        if (!content[0]) {\n            Alert.error(\"回复内容不能为空\")\n            return false\n        }\n        this.props.onUpdate(this.props.formValue)\n    }\n\n    render() {\n        return (\n            <Drawer\n                show={this.props.show}\n                onHide={this.props.onClose}\n                size=\"sm\"\n            >\n                <Drawer.Header>\n                    <Drawer.Title>{this.props.title}</Drawer.Title>\n                </Drawer.Header>\n                <Drawer.Body>\n                    <Form fluid>\n                        <FormGroup>\n                            <ControlLabel>规则名称</ControlLabel>\n                            <FormControl name=\"name\" value={this.props.formValue.name} onChange={(e) => {\n                                this.handleFrom(\"name\", e)\n                            }}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>匹配方式</ControlLabel>\n\n                        </FormGroup>\n                        <FormGroup>\n                            <div className=\"reply-attach-after\">\n                                <ControlLabel>关键词</ControlLabel>\n                                <Whisper placement=\"top\" trigger=\"hover\" speaker={<Tooltip>添加</Tooltip>}>\n                                    <Button color=\"green\" onClick={() => {\n                                        let keyWords = this.props.formValue.key_words\n                                        keyWords.push({\"match\": \"1\", \"words\": \"\"})\n                                        this.handleFrom(\"key_words\", keyWords)\n                                    }}>+</Button>\n                                </Whisper>\n                            </div>\n                            {\n                                this.props.formValue.key_words.map((item: any, index: number) => {\n                                    return <div key={index} className=\"reply-attach-before\"\n                                                style={{marginBottom: \"15px\"}}>\n                                        {\n                                            index > 0 ? <Whisper placement=\"top\" trigger=\"hover\"\n                                                                 speaker={<Tooltip>删除</Tooltip>}>\n                                                <Button color=\"red\" onClick={() => {\n                                                    let inputList = this.props.formValue.key_words\n                                                    let newInput = [...inputList.slice(0, index)]\n                                                    newInput.push(...inputList.slice(index + 1))\n                                                    this.handleFrom(\"key_words\", newInput)\n                                                }}>x</Button>\n                                            </Whisper> : \"\"\n                                        }\n                                        <SelectPicker data={this.state.matchType}\n                                                      defaultValue={item.match.toString()}\n                                                      searchable={false} block={true}\n                                                      cleanable={false}\n                                                      onChange={(e) => {\n                                                          this.setState({\n                                                              match: e\n                                                          })\n                                                      }}\n                                        />\n                                        <FormControl name=\"key_words[]\" value={item.words}\n                                                     onChange={(e) => {\n                                                         this.props.formValue.key_words[index] = {\n                                                             match: this.state.match,\n                                                             words: e\n                                                         }\n                                                         this.handleFrom(\"key_words\", this.props.formValue.key_words)\n                                                     }}/>\n                                    </div>\n                                })\n                            }\n                        </FormGroup>\n                        <FormGroup>\n                            <div className=\"reply-attach-after\">\n                                <ControlLabel>回复内容</ControlLabel>\n                                <Whisper placement=\"top\" trigger=\"hover\" speaker={<Tooltip>添加</Tooltip>}>\n                                    <Button color=\"green\" onClick={() => {\n                                        let content = this.props.formValue.content\n                                        content.push(\"\")\n                                        this.handleFrom(\"content\", content)\n                                    }}>+</Button>\n                                </Whisper>\n                            </div>\n                            {\n                                this.props.formValue.content.map((item: any, index: number) => {\n                                    return <div key={index} className=\"reply-attach-before\"\n                                                style={{marginBottom: \"15px\"}}>\n                                        {\n                                            index > 0 ? <Whisper placement=\"top\" trigger=\"hover\"\n                                                                 speaker={<Tooltip>删除</Tooltip>}>\n                                                <Button color=\"red\" onClick={() => {\n                                                    let inputList = this.props.formValue.content\n                                                    let newInput = [...inputList.slice(0, index)]\n                                                    newInput.push(...inputList.slice(index + 1))\n                                                    this.handleFrom(\"content\", newInput)\n                                                }}>x</Button>\n                                            </Whisper> : \"\"\n                                        }\n                                        <FormControl name=\"content[]\" value={item} onChange={(e) => {\n                                            this.props.formValue.content[index] = e\n                                            this.handleFrom(\"content\", this.props.formValue.content)\n                                        }}/>\n                                    </div>\n                                })\n                            }\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>回复方式</ControlLabel>\n                            <RadioGroup inline name=\"reply_type\" value={this.props.formValue.reply_type}\n                                        onChange={value => {\n                                            this.handleFrom(\"reply_type\", value)\n                                        }}>\n                                <Radio value=\"1\">回复全部</Radio>\n                                <Radio value=\"2\">随机一条</Radio>\n                            </RadioGroup>\n                        </FormGroup>\n                    </Form>\n                </Drawer.Body>\n                <Drawer.Footer>\n                    <Button onClick={this.handleUpdate} appearance=\"primary\">提交</Button>\n                    <Button onClick={this.props.onClose} appearance=\"subtle\">取消</Button>\n                </Drawer.Footer>\n            </Drawer>\n        )\n    }\n}","import React from \"react\";\nimport {\n    Button,\n    Drawer,\n} from \"rsuite\";\n\nexport interface IProps {\n    show: boolean,\n    info: any,\n    onClose: () => void\n}\n\nexport default class KeyWordsInfo extends React.Component<IProps, any> {\n    render() {\n        return (\n            <Drawer\n                show={this.props.show}\n                onHide={this.props.onClose}\n                size=\"xs\"\n            >\n                <Drawer.Header>\n                    <Drawer.Title>查看详情</Drawer.Title>\n                </Drawer.Header>\n                <Drawer.Body>\n                    <div className=\"info-body\">\n                        <div className=\"info-header\">规则名称</div>\n                        <div className=\"info-content\">{this.props.info.name}</div>\n                    </div>\n                    <div className=\"info-body\">\n                        <div className=\"info-header\">关键词</div>\n                        <div className=\"info-content\">\n                            {\n                                this.props.info.key_words.map((item: any, index: number) => {\n                                    return <span key={index}>{item.words}({item.match === \"1\" ? \"半匹配\" : \"全匹配\"})</span>\n                                })\n                            }\n                        </div>\n                    </div>\n                    <div className=\"info-body\">\n                        <div className=\"info-header\">回复内容</div>\n                        <div className=\"info-content\">\n                            {\n                                this.props.info.content.map((item: any, index: number) => {\n                                    return <span key={index} style={{display: \"block\"}}>{item}</span>\n                                })\n                            }\n                        </div>\n                    </div>\n                    <div className=\"info-body\">\n                        <div className=\"info-header\">回复方式</div>\n                        <div className=\"info-content\">{this.props.info.reply_type === \"1\" ? \"全部回复\" : \"随机一条\"}</div>\n                    </div>\n                </Drawer.Body>\n                <Drawer.Footer>\n                    <Button onClick={this.props.onClose} appearance=\"primary\">关闭</Button>\n                </Drawer.Footer>\n            </Drawer>\n        )\n    }\n}","import React from \"react\";\nimport {Button, Divider, Icon, Table} from \"rsuite\";\nimport \"../../sass/reply.scss\"\nimport KeyWordsEdit from \"./keyWordsEdit\";\nimport KeyWordsInfo from \"./keyWordsInfo\";\nimport {initState} from \"../../reducers/keyWords\"\n\nexport interface IProps {\n    list: any\n    total: number\n    update: boolean\n    formValue: any\n    getList: (type: string, page: number, pageSize: number) => void\n    onUpdate: (formValue: any) => void\n    onDel: (id: number, type: string) => void,\n    onModify: (formValue: any) => void,\n}\n\nexport default class Index extends React.Component<IProps, any> {\n    constructor(props: Readonly<IProps>) {\n        super(props)\n        this.state = {\n            show: false,\n            showInfo: false,\n            info: initState.formValue,\n            title: \"添加回复\",\n            page: 1\n        }\n        this.add = this.add.bind(this)\n    }\n\n    componentDidMount(): void {\n        this.props.getList(\"key_words\", 0, 20)\n    }\n\n    componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<any>, snapshot?: any): void {\n        if (!prevProps.update && this.props.update) {\n            this.close()\n        }\n    }\n\n    add = () => {\n        this.setState({\n            show: true,\n        })\n    }\n\n    close = () => {\n        let modify = this.props.onModify\n        this.setState({\n            show: false\n        }, function () {\n            setTimeout(function () {\n                modify(initState.formValue)\n            }, 500)\n        })\n    }\n\n    closeInfo = () => {\n        this.setState({\n            showInfo: false\n        })\n    }\n\n    render() {\n        const {Column, HeaderCell, Cell, Pagination} = Table;\n        const ActionCell = ({rowData, dataKey, ...props}: any) => {\n            return (\n                <Cell {...props} className=\"link-group\">\n                    <a role=\"button\" onClick={() => {\n                        this.props.onModify({\n                            \"id\": rowData.id,\n                            \"name\": rowData.name,\n                            \"key_words\": rowData.key_words,\n                            \"content\": rowData.content.split(\",\"),\n                            \"reply_type\": rowData.reply_type.toString(),\n                            \"type\": \"key_words\"\n                        })\n                        this.setState({\n                            title: \"编辑回复\",\n                            show: true\n                        })\n\n                    }}>编辑</a>\n                    <Divider vertical/>\n                    <a role=\"button\" onClick={() => {\n                        this.setState({\n                            showInfo: true,\n                            info: {\n                                \"id\": rowData.id,\n                                \"name\": rowData.name,\n                                \"key_words\": rowData.key_words,\n                                \"content\": rowData.content.split(\",\"),\n                                \"reply_type\": rowData.reply_type.toString(),\n                                \"type\": \"key_words\"\n                            }\n                        })\n                    }}>详情</a>\n                    <Divider vertical/>\n                    <a role=\"button\" onClick={() => {\n                        this.props.onDel(rowData.id, \"key_words\")\n                    }}>删除</a>\n                </Cell>\n            );\n        };\n        const KeyCell = ({rowData, dataKey, ...props}: any) => {\n            const data = rowData[\"key_words\"]\n            let keyWords = \"\"\n            data.forEach((item: any, index: number) => {\n                keyWords += item.words + \",\"\n            })\n            if (keyWords.length > 0) {\n                keyWords = keyWords.substr(0, keyWords.length - 1)\n            }\n            return <Cell {...props}>{keyWords}</Cell>\n        }\n        return (\n            <div id=\"page\">\n                <KeyWordsEdit show={this.state.show} onClose={this.close} title={this.state.title}\n                              formValue={this.props.formValue} onModify={this.props.onModify}\n                              onUpdate={this.props.onUpdate}/>\n                <KeyWordsInfo info={this.state.info} show={this.state.showInfo} onClose={this.closeInfo}/>\n                <Button color=\"orange\" onClick={this.add}>\n                    <Icon icon=\"plus\"/> 新增回复\n                </Button>\n                <Divider/>\n                <Table loading={false} data={this.props.list} style={{marginLeft: 25, marginRight: 25}} autoHeight={true}>\n                    <Column width={50} align=\"center\" fixed>\n                        <HeaderCell>Id</HeaderCell>\n                        <Cell dataKey=\"id\"/>\n                    </Column>\n                    <Column flexGrow={4}>\n                        <HeaderCell>规则名称</HeaderCell>\n                        <Cell dataKey=\"name\"/>\n                    </Column>\n                    <Column flexGrow={9}>\n                        <HeaderCell>关键字</HeaderCell>\n                        <KeyCell dataKey=\"key_words\"/>\n                    </Column>\n                    <Column flexGrow={9}>\n                        <HeaderCell>回复内容</HeaderCell>\n                        <Cell dataKey=\"content\"/>\n                    </Column>\n                    <Column flexGrow={3}>\n                        <HeaderCell></HeaderCell>\n                        <ActionCell dataKey=\"id\"/>\n                    </Column>\n                </Table>\n                {\n                    this.props.total > 0 ? <Pagination\n                        activePage={this.state.page}\n                        displayLength={20}\n                        total={this.props.total}\n                        renderLengthMenu={() => {\n                            return \"\"\n                        }}\n                        renderTotal={() => {\n                            return <div>总数:{this.props.total}</div>\n                        }}\n                        onChangePage={page => {\n                            this.props.getList(\"key_words\", page, 20)\n                            this.setState({\n                                page: page\n                            })\n                        }}\n                    /> : \"\"\n                }\n            </div>\n        )\n    }\n}","import {withRouter} from \"react-router\"\nimport {Dispatch} from \"redux\";\nimport {deleteAction, getListAction, updateAction, modifyAction} from \"../../actions/keyWords\";\nimport {connect} from \"react-redux\";\nimport keyWords from \"../../component/keyWords\";\n\nconst mapStateToProps = (state: any) => ({\n    list: state.KeyWords.list,\n    total: state.KeyWords.total,\n    update: state.KeyWords.update,\n    del: state.KeyWords.del,\n    formValue: state.KeyWords.formValue\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    getList: (type: string, page: number, pageSize: number) => dispatch(getListAction(type, page, pageSize)),\n    onUpdate: (formValue: any) => dispatch(updateAction(formValue)),\n    onDel: (id: number, type: string) => dispatch(deleteAction(id, type)),\n    onModify: (formValue: any) => dispatch(modifyAction(formValue))\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(keyWords))","import {DELETE_KEY_WORDS, GET_KEY_WORDS_LIST, MODIFY_KEY_WORDS, UPDATE_KEY_WORDS} from \"../constants/actions\";\n\nexport interface keyWords {\n    type: string\n    list: any,\n    total: number,\n    update: boolean,\n    del: boolean,\n    formValue: any\n}\n\n\nfunction getListAction(replyType: string, page: number, pageSize: number) {\n    return {\n        type: GET_KEY_WORDS_LIST,\n        replyType,\n        page,\n        pageSize,\n    }\n}\n\nfunction updateAction(formValue: any) {\n    return {\n        type: UPDATE_KEY_WORDS,\n        formValue\n    }\n}\n\nfunction deleteAction(id: number, editType: string) {\n    return {\n        type: DELETE_KEY_WORDS,\n        id,\n        editType,\n    }\n}\n\nfunction modifyAction(formValue: any) {\n    return {\n        type: MODIFY_KEY_WORDS,\n        formValue\n    }\n}\n\nexport {\n    getListAction,\n    updateAction,\n    deleteAction,\n    modifyAction\n}"],"sourceRoot":""}