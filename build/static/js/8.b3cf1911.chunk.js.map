{"version":3,"sources":["component/qrcode/index.tsx","container/qrcode/index.ts","actions/qrcode.ts"],"names":["Qrcode","props","state","page","show","this","getList","Column","Table","HeaderCell","Cell","Pagination","id","Button","color","onClick","onCreate","Icon","icon","Divider","loading","data","list","style","marginLeft","marginRight","autoHeight","width","align","fixed","dataKey","flexGrow","rowData","className","role","onDownLoad","name","vertical","onDel","total","activePage","displayLength","renderLengthMenu","onChangePage","setState","React","Component","withRouter","connect","dispatch","pageSize","type","GET_QRCODE_LIST","getListAction","CREATE_QRCODE","DOWNLOAD_QRCODE","downAction","DEL_QRCODE","delAction"],"mappings":"+PA0BqBA,G,mBACjB,WAAYC,GAA0B,IAAD,8BACjC,4CAAMA,KACDC,MAAQ,CACTC,KAAM,EACNC,MAAM,GAJuB,E,iFASjCC,KAAKJ,MAAMK,QAAQ,EAAG,M,+BAGhB,IAAD,OACEC,EAAwCC,IAAxCD,OAAQE,EAAgCD,IAAhCC,WAAYC,EAAoBF,IAApBE,KAAMC,EAAcH,IAAdG,WAcjC,OACI,yBAAKC,GAAG,QACJ,kBAACC,EAAA,EAAD,CAAQC,MAAM,SAASC,QAAS,WAC5B,EAAKd,MAAMe,aAEX,kBAACC,EAAA,EAAD,CAAMC,KAAK,SAHf,mCAKA,kBAACC,EAAA,EAAD,MACA,kBAACX,EAAA,EAAD,CAAOY,SAAS,EAAOC,KAAMhB,KAAKJ,MAAMqB,KAAMC,MAAO,CAACC,WAAY,GAAIC,YAAa,IAC5EC,YAAY,GACf,kBAACnB,EAAD,CAAQoB,MAAO,GAAIC,MAAM,SAASC,OAAK,GACnC,kBAACpB,EAAD,WACA,kBAACC,EAAD,CAAMoB,QAAQ,QAElB,kBAACvB,EAAD,CAAQwB,SAAU,GACd,kBAACtB,EAAD,uCACA,kBAACC,EAAD,CAAMoB,QAAQ,UAElB,kBAACvB,EAAD,CAAQwB,SAAU,GACd,kBAACtB,EAAD,qBACA,kBAACC,EAAD,CAAMoB,QAAQ,aAMlB,kBAACvB,EAAD,CAAQwB,SAAU,GACd,kBAACtB,EAAD,qBACA,kBAACC,EAAD,CAAMoB,QAAQ,UAsBlB,kBAACvB,EAAD,CAAQwB,SAAU,GACd,kBAACtB,EAAD,MACA,mBAjEG,SAAC,GAAuC,IAAtCuB,EAAqC,EAArCA,QAAqB/B,GAAgB,EAA5B6B,QAA4B,sCACtD,OACI,kBAACpB,EAAD,iBAAUT,EAAV,CAAiBgC,UAAU,eACvB,uBAAGC,KAAK,SAASnB,QAAS,WACtB,EAAKd,MAAMkC,WAAWH,EAAQpB,GAAIoB,EAAQI,QAD9C,gBAGA,kBAACjB,EAAA,EAAD,CAASkB,UAAQ,IACjB,uBAAGH,KAAK,SAASnB,QAAS,WACtB,EAAKd,MAAMqC,MAAMN,EAAQpB,MAD7B,mBA0DI,CAAYkB,QAAQ,SAIxBzB,KAAKJ,MAAMsC,MAAQ,EAAI,kBAAC5B,EAAD,CACnB6B,WAAYnC,KAAKH,MAAMC,KACvBsC,cAAe,GACfF,MAAOlC,KAAKJ,MAAMsC,MAClBG,iBAAkB,WACd,MAAO,IAEXC,aAAc,SAAAxC,GACV,EAAKF,MAAMK,QAAQH,EAAM,IACzB,EAAKyC,SAAS,CACVzC,KAAMA,OAGb,Q,GAjGW0C,IAAMC,YCI3BC,sBAAWC,aAxBF,SAAC9C,GAAD,MAAiB,CACrCoB,KAAMpB,EAAMF,OAAOsB,KACnBiB,MAAOrC,EAAMF,OAAOuC,UAQG,SAACU,GAAD,MAAyB,CAMhD3C,QAAS,SAACH,EAAc+C,GAAf,OAAoCD,ECJjD,SAAuB9C,EAAc+C,GACjC,MAAO,CACHC,KAAMC,IACNjD,OACA+C,YDAkDG,CAAclD,EAAM+C,KAG1ElC,SAAU,kBAAMiC,ECgBT,CACHE,KAAMG,ODhBVnB,WAAY,SAACvB,EAAYwB,GAAb,OAA8Ba,EC2B9C,SAAoBrC,EAAYwB,GAC5B,MAAO,CACHe,KAAMI,IACN3C,KACAwB,QD/B+CoB,CAAW5C,EAAIwB,KAClEE,MAAO,SAAC1B,GAAD,OAAgBqC,ECmB3B,SAAmBrC,GACf,MAAO,CACHuC,KAAMM,IACN7C,MDtB4B8C,CAAU9C,QAGpBoC,CAA6ChD","file":"static/js/8.b3cf1911.chunk.js","sourcesContent":["import React from \"react\";\nimport {Button, Divider, Icon, Table} from \"rsuite\";\nimport \"../../sass/qrcode.scss\"\n\nexport interface IProps {\n    list: any\n    total: number\n    getList: (page: number, pageSize: number) => void\n    // formValue: any\n    // areaList: any\n    // brandList: any\n    // typeList: any\n    // province: any\n    // city: any\n    // getArea: () => void,\n    // getBrand: () => void,\n    // getType: () => void,\n    // getProvince: () => void,\n    // getCity: (provinceId: number) => void,\n    // onUpdate: (formValue: any) => void\n    // onModify: (formValue: any) => void\n    onCreate: () => void\n    onDownLoad: (id: number, name: string) => void\n    onDel: (id: number) => void\n}\n\nexport default class Qrcode extends React.Component<IProps, any> {\n    constructor(props: Readonly<IProps>) {\n        super(props);\n        this.state = {\n            page: 1,\n            show: false\n        }\n    }\n\n    componentDidMount(): void {\n        this.props.getList(0, 20)\n    }\n\n    render() {\n        const {Column, HeaderCell, Cell, Pagination} = Table;\n        const ActionCell = ({rowData, dataKey, ...props}: any) => {\n            return (\n                <Cell {...props} className=\"link-group\">\n                    <a role=\"button\" onClick={() => {\n                        this.props.onDownLoad(rowData.id, rowData.name)\n                    }}>下载</a>\n                    <Divider vertical/>\n                    <a role=\"button\" onClick={() => {\n                        this.props.onDel(rowData.id)\n                    }}>删除</a>\n                </Cell>\n            );\n        };\n        return (\n            <div id=\"page\">\n                <Button color=\"orange\" onClick={() => {\n                    this.props.onCreate()\n                }}>\n                    <Icon icon=\"plus\"/> 创建二维码\n                </Button>\n                <Divider/>\n                <Table loading={false} data={this.props.list} style={{marginLeft: 25, marginRight: 25}}\n                       autoHeight={true}>\n                    <Column width={50} align=\"center\" fixed>\n                        <HeaderCell>ID</HeaderCell>\n                        <Cell dataKey=\"id\"/>\n                    </Column>\n                    <Column flexGrow={4}>\n                        <HeaderCell>二维码名称</HeaderCell>\n                        <Cell dataKey=\"name\"/>\n                    </Column>\n                    <Column flexGrow={3}>\n                        <HeaderCell>类型</HeaderCell>\n                        <Cell dataKey=\"forever\"/>\n                    </Column>\n                    {/*<Column flexGrow={3}>*/}\n                    {/*    <HeaderCell>有效期</HeaderCell>*/}\n                    {/*    <Cell dataKey=\"lastName\"/>*/}\n                    {/*</Column>*/}\n                    <Column flexGrow={3}>\n                        <HeaderCell>区域</HeaderCell>\n                        <Cell dataKey=\"area\"/>\n                    </Column>\n                    {/*<Column flexGrow={3}>*/}\n                    {/*    <HeaderCell>品牌</HeaderCell>*/}\n                    {/*    <Cell dataKey=\"city\"/>*/}\n                    {/*</Column>*/}\n                    {/*<Column flexGrow={3}>*/}\n                    {/*    <HeaderCell>性质</HeaderCell>*/}\n                    {/*    <Cell dataKey=\"city\"/>*/}\n                    {/*</Column>*/}\n                    {/*<Column flexGrow={3}>*/}\n                    {/*    <HeaderCell>省份</HeaderCell>*/}\n                    {/*    <Cell dataKey=\"city\"/>*/}\n                    {/*</Column>*/}\n                    {/*<Column flexGrow={3}>*/}\n                    {/*    <HeaderCell>城市</HeaderCell>*/}\n                    {/*    <Cell dataKey=\"city\"/>*/}\n                    {/*</Column>*/}\n                    {/*<Column flexGrow={3}>*/}\n                    {/*    <HeaderCell>门店</HeaderCell>*/}\n                    {/*    <Cell dataKey=\"city\"/>*/}\n                    {/*</Column>*/}\n                    <Column flexGrow={2}>\n                        <HeaderCell></HeaderCell>\n                        <ActionCell dataKey=\"id\"/>\n                    </Column>\n                </Table>\n                {\n                    this.props.total > 0 ? <Pagination\n                        activePage={this.state.page}\n                        displayLength={20}\n                        total={this.props.total}\n                        renderLengthMenu={() => {\n                            return \"\"\n                        }}\n                        onChangePage={page => {\n                            this.props.getList(page, 20)\n                            this.setState({\n                                page: page\n                            })\n                        }}\n                    /> : \"\"\n                }\n            </div>\n        )\n    }\n}","import {withRouter} from \"react-router\"\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {createAction, delAction, downAction, getListAction} from \"../../actions/qrcode\";\nimport Qrcode from \"../../component/qrcode\";\n\nconst mapStateToProps = (state: any) => ({\n    list: state.Qrcode.list,\n    total: state.Qrcode.total,\n    // formValue: state.Qrcode.formValue,\n    // areaList: state.Area.list,\n    // brandList: state.Brand.list,\n    // typeList: state.ShopType.list,\n    // province: state.Province.list,\n    // city: state.City.list,\n})\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    // getArea: () => dispatch(getAreaAll()),\n    // getBrand: () => dispatch(getBrandAll()),\n    // getType: () => dispatch(getTypeAll()),\n    // getProvince: () => dispatch(getProvince()),\n    // getCity: (provinceId: number) => dispatch(getCity(0, 0, provinceId)),\n    getList: (page: number, pageSize: number) => dispatch(getListAction(page, pageSize)),\n    // onUpdate: (formValue: any) => dispatch(updateAction(formValue)),\n    // onModify: (formValue: any) => dispatch(modifyAction(formValue))\n    onCreate: () => dispatch(createAction()),\n    onDownLoad: (id: number, name: string) => dispatch(downAction(id, name)),\n    onDel: (id: number) => dispatch(delAction(id))\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Qrcode))","import {\n    CREATE_QRCODE,\n    DEL_QRCODE,\n    DOWNLOAD_QRCODE,\n    GET_QRCODE_LIST,\n    MODIFY_QRCODE,\n    UPDATE_QRCODE\n} from \"../constants/actions\";\n\nexport interface qrcode {\n    type: string,\n    list: any,\n    total: number,\n    page: number,\n    pageSize: number,\n    qrcode: string\n}\n\nfunction getListAction(page: number, pageSize: number) {\n    return {\n        type: GET_QRCODE_LIST,\n        page,\n        pageSize\n    }\n}\n\nfunction updateAction(formValue: any) {\n    return {\n        type: UPDATE_QRCODE,\n        formValue\n    }\n}\n\nfunction modifyAction(formValue: any) {\n    return {\n        type: MODIFY_QRCODE,\n        formValue\n    }\n}\n\nfunction createAction() {\n    return {\n        type: CREATE_QRCODE\n    }\n}\n\nfunction delAction(id: number) {\n    return {\n        type: DEL_QRCODE,\n        id\n    }\n}\n\nfunction downAction(id: number, name: string) {\n    return {\n        type: DOWNLOAD_QRCODE,\n        id,\n        name\n    }\n}\n\nexport {\n    getListAction,\n    updateAction,\n    modifyAction,\n    delAction,\n    createAction,\n    downAction,\n}"],"sourceRoot":""}