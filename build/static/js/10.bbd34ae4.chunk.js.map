{"version":3,"sources":["actions/library.ts","component/library-other/card.tsx","component/library-img-txt/edit.tsx","component/library-img-txt/index.tsx","container/library/index.ts"],"names":["getListAction","libType","title","page","pageSize","type","GET_LIB_LIST","modifyAction","formValue","MODIFY_LIB","updateAction","UPDATE_LIB","delAction","id","DEL_LIB","syncAction","SYNC_LIB","selectAction","info","SELECT_LIB","Card","props","close","onClose","state","searchTile","upload","loading","selected","prevProps","prevState","snapshot","show","this","getPicList","backdrop","onHide","size","Header","Title","className","onUpload","value","setState","onSuccess","response","file","code","Alert","success","message","error","headers","getCookie","action","DOMAIN","UPLOAD","data","fileListVisible","disabled","style","background","color","icon","Body","marginTop","display","flexDirection","flexWrap","picList","map","item","key","border","src","url","alt","name","height","onClick","textAlign","overflow","Footer","total","activePage","pages","Math","ceil","maxButtons","ellipsis","onSelect","more","clean","appearance","React","Component","Edit","handleFrom","onModify","handleUpdate","media_id","onUpdate","closeLibrary","showLib","Drawer","Form","fluid","FormGroup","ControlLabel","FormControl","onChange","author","controls","toHTML","length","width","verticalAlign","Icon","fontSize","Input","componentClass","rows","placeholder","lineHeight","Toggle","checkedChildren","unCheckedChildren","defaultChecked","show_cover_pic","source_url","RadioGroup","defaultValue","comment","Radio","Button","LibraryImgTxt","add","getList","Column","Table","HeaderCell","Cell","Pagination","onEdit","layout","e","searchTitle","Divider","list","marginLeft","marginRight","autoHeight","rowHeight","align","fixed","dataKey","flexGrow","rowData","cover_pic","datakey","href","target","vertical","role","onDel","displayLength","renderLengthMenu","onChangePage","withRouter","connect","dispatch","Library"],"mappings":"uHAAA,uNAYA,SAASA,EAAcC,EAAiBC,EAAeC,EAAcC,GACjE,MAAO,CACHC,KAAMC,IACNL,UACAC,QACAC,OACAC,YAIR,SAASG,EAAaC,GAClB,MAAO,CACHH,KAAMI,IACND,aAIR,SAASE,EAAaF,GAClB,MAAO,CACHH,KAAMM,IACNH,aAIR,SAASI,EAAUC,EAAYZ,GAC3B,MAAO,CACHI,KAAMS,IACND,GAAIA,EACJZ,WAIR,SAASc,EAAWd,GAChB,MAAO,CACHI,KAAMW,IACNf,WAIR,SAASgB,EAAaC,GAClB,MAAO,CACHb,KAAMc,IACND,U,qNCtCaE,G,mBACjB,WAAYC,GAA0B,IAAD,8BACjC,4CAAMA,KAgBVC,MAAQ,WACJ,EAAKD,MAAME,QAAQ,UAhBnB,EAAKC,MAAQ,CACTrB,KAAM,EACNsB,WAAY,GACZC,QAAQ,EACRC,SAAS,EACTC,SAAU,IAPmB,E,gFAWlBC,EAA6BC,EAA0BC,IACjEF,EAAUG,MAAQC,KAAKZ,MAAMW,MAC9BC,KAAKZ,MAAMa,WAAW,QAAS,GAAI,EAAG,M,+BAQpC,IAAD,OACL,OACI,6BACI,kBAAC,IAAD,CAAOC,UAAU,EAAMH,KAAMC,KAAKZ,MAAMW,KAAMI,OAAQH,KAAKX,MACpDe,KAAK,MACR,kBAAC,IAAMC,OAAP,KACI,kBAAC,IAAMC,MAAP,KACI,2DAEJ,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAUC,UAAU,SACVC,SAAU,SAAAC,GACN,EAAKC,SAAS,CACVjB,QAAQ,EACRC,SAAS,KAGjBiB,UAAW,SAACC,EAAeC,GACD,MAAlBD,EAASE,MACT,EAAK1B,MAAMa,WAAW,QAAS,GAAI,EAAG,IACtCc,IAAMC,QAAQJ,EAASK,UAEvBF,IAAMG,MAAMN,EAASK,SAEzB,EAAKP,SAAS,CACVjB,QAAQ,EACRC,SAAS,KAGjByB,QAAS,CACL,cAAiB,UAAYC,YAAU,WAAa,YAAc,GAAKA,YAAU,UAErFC,OAAQC,IAASC,IACjBC,KAAM,CAAC,KAAQ,SACfC,iBAAiB,EACjBC,SAAU1B,KAAKT,MAAME,QAE3B,kBAAC,IAAD,CAAQkC,MAAO,CAACC,WAAY,UAAWC,MAAO,WAAYnC,QAASM,KAAKT,MAAMG,SAC1E,kBAAC,IAAD,CAAMoC,KAAK,SADf,+BAKR,kBAAC,IAAMC,KAAP,CAAYJ,MAAO,CAACK,UAAW,IAC3B,yBAAKL,MAAO,CAACM,QAAS,OAAQC,cAAe,MAAOC,SAAU,SAEtDnC,KAAKZ,MAAMgD,QAAQC,KAAI,SAACC,GACpB,OAAO,kBAAC,IAAD,CAAO/B,UAAU,UAAUgC,IAAKD,EAAK1D,GAC9B+C,MAAO,CAACa,OAAQ,EAAKjD,MAAMI,SAASf,KAAO0D,EAAK1D,GAAK,oBAAsB,KACrF,yBAAK6D,IAAKH,EAAKI,IAAKC,IAAKL,EAAKM,KAAMC,OAAO,MAAMC,QAAS,WACtD,EAAKpC,SAAS,CACVf,SAAU2C,OAGlB,0BAAMX,MAAO,CACTM,QAAS,QACTc,UAAW,SACXC,SAAU,WACVV,EAAKM,YAM7B,kBAAC,IAAMK,OAAP,KACI,6BAEQjD,KAAKZ,MAAM8D,MAAQ,EAAI,kBAAC,IAAD,CACnBC,WAAYnD,KAAKT,MAAMrB,KACvBkF,MAAOC,KAAKC,KAAKtD,KAAKZ,MAAM8D,MAAQ,IACpCK,WAAY,GACZC,UAAU,EACVC,SAAU,SAACvF,GACP,IAAMwF,EAAO,EAAKtE,MAAMa,WACxB,EAAKS,SAAS,CACVxC,KAAMA,IACP,WACCwF,EAAK,QAAS,GAAIxF,EAAM,UAG/B,IAGb,kBAAC,IAAD,CAAQ4E,QAAS,WACb,EAAK1D,MAAMqE,SAAS,EAAKlE,MAAMI,UAC3B,EAAKP,MAAMuE,OACX,EAAKjD,SAAS,CACVf,UAAU,IAGlB,EAAKN,SACNuE,WAAW,WARd,gBAWA,kBAAC,IAAD,CAAQd,QAAS9C,KAAKX,MAAOuE,WAAW,UAAxC,uB,GAnHUC,IAAMC,a,6RCiBnBC,E,YACjB,WAAY3E,GAA0B,IAAD,8BACjC,4CAAMA,KAQV4E,WAAa,SAACpB,EAAcnC,GACxB,IAAIlC,EAAY,EAAKa,MAAMb,UAC3BA,EAAUqE,GAAQnC,EAClB,EAAKC,SAAS,CACVnC,UAAWA,IAEf,EAAKa,MAAM6E,SAAS1F,IAfa,EAkBrC2F,aAAe,WACX,IAAI3F,EAAY,EAAKa,MAAMb,UAC3BA,EAAS,UAAgB,EAAKa,MAAMO,SAASwE,SAC7C,EAAK/E,MAAMgF,SAAS7F,IArBa,EAwBrC8F,aAAe,WACX,EAAK3D,SAAS,CACV4D,SAAS,KAxBb,EAAK/E,MAAQ,CACTQ,MAAM,EACNxB,UAAW,GACX+F,SAAS,GALoB,E,sEA8B3B,IAAD,OAEL,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQrE,UAAU,EAAMH,KAAMC,KAAKZ,MAAMW,KAAMI,OAAQH,KAAKZ,MAAME,QAC1Dc,KAAK,MACT,kBAACmE,EAAA,EAAOlE,OAAR,KACI,kBAACkE,EAAA,EAAOjE,MAAR,8CAEJ,kBAACiE,EAAA,EAAOxC,KAAR,KACI,kBAACyC,EAAA,EAAD,CAAMC,OAAK,EAAClE,UAAU,gBAClB,kBAACmE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,qBACA,kBAACC,EAAA,EAAD,CAAahC,KAAK,QAAQnC,MAAOT,KAAKZ,MAAMb,UAAUN,MAAO4G,SAAU,SAACpE,GACpE,EAAKuD,WAAW,QAASvD,OAGjC,kBAACiE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,qBACA,kBAACC,EAAA,EAAD,CAAahC,KAAK,SAASnC,MAAOT,KAAKZ,MAAMb,UAAUuG,OAAQD,SAAU,SAACpE,GACtE,EAAKuD,WAAW,SAAUvD,OAGlC,kBAACiE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,qBACA,kBAAC,IAAD,CACII,SAzBI,CAAC,OAAQ,OAAQ,gBAAiB,YAAa,OAAQ,SAAU,YAAa,iBAAkB,aAAc,aAAc,cAAe,iBAAkB,UAAW,QAAS,aAAc,KAAM,SA0BzMpD,MAAO,CAACa,OAAQ,qBAChBqC,SAAU,SAACpE,GACP,EAAKuD,WAAW,UAAWvD,EAAMuE,cAI7C,kBAACN,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,uCACA,kBAAC,IAAD,CAAM5E,KAAMC,KAAKT,MAAM+E,QACjBlC,QAASpC,KAAKZ,MAAMgD,SAAW,GAC/BnC,WAAYD,KAAKZ,MAAMa,WACvBwD,SAAUzD,KAAKZ,MAAMqE,SACrBP,MAAOlD,KAAKZ,MAAM8D,MAClB5D,QAASU,KAAKqE,aACdV,OAAO,IAEb,yBAAKpD,UAAU,SACX,0BAAMuC,QAAS,WACX,EAAKpC,SAAS,CACV4D,SAAS,MAIsB,IAA/BtE,KAAKZ,MAAMO,SAASsF,OAChB,yBAAKxC,IAAKzC,KAAKZ,MAAMO,SAAS+C,IAAKC,IAAK3C,KAAKZ,MAAMO,SAASiD,KACvDsC,MAAO,IAAKvD,MAAO,CAACwD,cAAe,SACxC,kBAACC,EAAA,EAAD,CAAMtD,KAAK,OAAOH,MAAO,CAACE,MAAO,UAAWwD,SAAU,WAGlE,kBAAEC,EAAA,EAAF,CACIC,eAAe,WACfC,KAAM,EACNC,YAAY,uTACZZ,SAAU,SAACpE,GACP,EAAKuD,WAAW,UAAWvD,QAK3C,kBAACiE,EAAA,EAAD,CAAWnE,UAAU,mBACjB,kBAACoE,EAAA,EAAD,CAAchD,MAAO,CAAC+D,WAAY,SAAlC,4BACA,kBAACC,EAAA,EAAD,CACIvF,KAAK,KACLwF,gBAAgB,eAChBC,kBAAkB,qBAClBC,eAAwD,MAAxC9F,KAAKZ,MAAMb,UAAUwH,eACrClB,SAAU,SAACpE,GACP,EAAKuD,WAAW,iBAAkBvD,EAAQ,IAAM,SAI5D,kBAACiE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,iCACA,kBAACC,EAAA,EAAD,CAAahC,KAAK,aAAanC,MAAOT,KAAKZ,MAAMb,UAAUyH,WAC9CnB,SAAU,SAACpE,GACP,EAAKuD,WAAW,aAAcvD,OAGnD,kBAACiE,EAAA,EAAD,CAAWnE,UAAU,mBACjB,kBAACoE,EAAA,EAAD,CAAchD,MAAO,CAAC+D,WAAY,SAAlC,4BACA,kBAACO,EAAA,EAAD,CAAYrD,KAAK,UAAUsD,aAAclG,KAAKZ,MAAMb,UAAU4H,SAAW,IAC7DtB,SAAU,SAACpE,GACP,EAAKuD,WAAW,UAAWvD,KAEvC,kBAAC2F,EAAA,EAAD,CAAO3F,MAAM,KAAb,gBACA,kBAAC2F,EAAA,EAAD,CAAO3F,MAAM,KAAb,kCACA,kBAAC2F,EAAA,EAAD,CAAO3F,MAAM,KAAb,4CAKhB,kBAAC8D,EAAA,EAAOtB,OAAR,KACI,kBAACoD,EAAA,EAAD,CAAQzC,WAAW,UAAUd,QAAS9C,KAAKkE,cAA3C,gBAGA,kBAACmC,EAAA,EAAD,CAAQzC,WAAW,SAASd,QAAS9C,KAAKZ,MAAME,SAAhD,uB,GArIUuE,IAAMC,WCfnBwC,E,YACjB,WAAYlH,GAA0B,IAAD,8BACjC,4CAAMA,KAYVmH,IAAM,WACF,EAAK7F,SAAS,CACVX,MAAM,KAfuB,EAmBrCV,MAAQ,WACJ,EAAKqB,SAAS,CACVX,MAAM,KAnBV,EAAKR,MAAQ,CACTrB,KAAM,EACNsB,WAAY,GACZO,MAAM,GALuB,E,iFAUjCC,KAAKZ,MAAMoH,QAAQ,OAAQ,GAAI,EAAG,M,+BAe5B,IAAD,OACEC,EAAwCC,IAAxCD,OAAQE,EAAgCD,IAAhCC,WAAYC,EAAoBF,IAApBE,KAAMC,EAAcH,IAAdG,WAmBjC,OACI,yBAAKjI,GAAG,QACJ,kBAAC,EAAD,CAAMmB,KAAMC,KAAKT,MAAMQ,KACjBxB,UAAWyB,KAAKZ,MAAMb,UACtBuI,OAAQ9G,KAAKZ,MAAMgF,SACnB9E,QAASU,KAAKX,MACd4E,SAAUjE,KAAKZ,MAAM6E,SACrBG,SAAUpE,KAAKZ,MAAMgF,SACrBX,SAAUzD,KAAKZ,MAAMqE,SACrBxD,WAAYD,KAAKZ,MAAMoH,QACvBpE,QAASpC,KAAKZ,MAAMgD,QACpBc,MAAOlD,KAAKZ,MAAM8D,MAClBvD,SAAUK,KAAKZ,MAAMO,WAE3B,yBAAKY,UAAU,UACX,6BACI,kBAAC8F,EAAA,EAAD,CAAQxE,MAAM,SAASiB,QAAS9C,KAAKuG,KACjC,kBAACnB,EAAA,EAAD,CAAMtD,KAAK,SADf,6BAGA,kBAACuE,EAAA,EAAD,CAAQxE,MAAM,SACV,kBAACuD,EAAA,EAAD,CAAMtD,KAAK,WADf,0CAKJ,kBAAC0C,EAAA,EAAD,CAAMuC,OAAO,UACT,kBAACrC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,qBACA,kBAACC,EAAA,EAAD,CAAahC,KAAK,QAAQiC,SAAU,SAACmC,GACjC,EAAKtG,SAAS,CACVuG,YAAaD,QAIzB,kBAACX,EAAA,EAAD,CAAQ9F,UAAU,cAAcqD,WAAW,UAAUd,QAAS,WAC1D,EAAK1D,MAAMoH,QAAQ,OAAQ,GAAI,EAAG,MADtC,kBAKR,kBAACU,EAAA,EAAD,MACA,kBAACR,EAAA,EAAD,CAAOhH,SAAS,EAAO8B,KAAMxB,KAAKZ,MAAM+H,KAAMxF,MAAO,CAACyF,WAAY,GAAIC,YAAa,IAC5EC,YAAY,EAAMC,UAAW,IAChC,kBAACd,EAAD,CAAQvB,MAAO,GAAIsC,MAAM,SAASrC,cAAc,SAASsC,OAAK,GAC1D,kBAACd,EAAD,WACA,kBAACC,EAAD,CAAMc,QAAQ,QAElB,kBAACjB,EAAD,CAAQkB,SAAU,EAAGH,MAAM,SAASrC,cAAc,UAC9C,kBAACwB,EAAD,qBACA,kBAACC,EAAD,CAAMc,QAAQ,WAElB,kBAACjB,EAAD,CAAQkB,SAAU,EAAGH,MAAM,SAASrC,cAAc,UAC9C,kBAACwB,EAAD,qBACA,mBA1DA,SAAC,GAAuC,IAAtCiB,EAAqC,EAArCA,QAAqBxI,GAAgB,EAA5BsI,QAA4B,sCACnD,OACI,kBAACd,EAASxH,EACN,yBAAKyD,OAAQ,GAAIJ,IAAKmF,EAAQC,UAAWlF,IAAKiF,EAAQhF,UAuDlD,CAASkF,QAAQ,eAErB,kBAACrB,EAAD,CAAQkB,SAAU,EAAGH,MAAM,SAASrC,cAAc,UAC9C,kBAACwB,EAAD,6CACA,kBAACC,EAAD,CAAMc,QAAQ,oBAElB,kBAACjB,EAAD,CAAQkB,SAAU,EAAGH,MAAM,SAASrC,cAAc,UAC9C,kBAACwB,EAAD,6CACA,kBAACC,EAAD,CAAMc,QAAQ,aAElB,kBAACjB,EAAD,CAAQkB,SAAU,EAAGH,MAAM,SAASrC,cAAc,UAC9C,kBAACwB,EAAD,iCACA,kBAACC,EAAD,CAAMc,QAAQ,gBAElB,kBAACjB,EAAD,CAAQkB,SAAU,EAAGH,MAAM,SAASrC,cAAc,UAC9C,kBAACwB,EAAD,MACA,mBArFG,SAAC,GAAuC,IAAtCiB,EAAqC,EAArCA,QAAqBxI,GAAgB,EAA5BsI,QAA4B,sCACtD,OACI,kBAACd,EAAD,iBAAUxH,EAAV,CAAiBmB,UAAU,eACvB,uBAAGwH,KAAMH,EAAQlF,IAAKsF,OAAO,UAA7B,gBACA,kBAACd,EAAA,EAAD,CAASe,UAAU,IACnB,uBAAGC,KAAK,SAASpF,QAAS,WACtB,EAAK1D,MAAM+I,MAAMP,EAAQhJ,GAAI,WADjC,mBAgFI,CAAY8I,QAAQ,SAIxB1H,KAAKZ,MAAM8D,MAAQ,EAAI,kBAAC2D,EAAD,CACnB1D,WAAYnD,KAAKT,MAAMrB,KACvBkK,cAAe,GACfC,iBAAkB,WACd,MAAO,IAEXnF,MAAOlD,KAAKZ,MAAM8D,MAClBoF,aAAc,SAAApK,GACV,EAAKkB,MAAMoH,QAAQ,QAAS,GAAI,EAAG,IACnC,EAAK9F,SAAS,CACVxC,KAAMA,OAGb,Q,GAlIkB2F,IAAMC,W,SCIlCyE,sBAAWC,aAhBF,SAACjJ,GAAD,MAAiB,CACrC4H,KAAM5H,EAAM+G,cAAca,KAC1B/E,QAAS7C,EAAM+G,cAAclE,QAC7Bc,MAAO3D,EAAM+G,cAAcpD,MAC3BvD,SAAUJ,EAAM+G,cAAcrH,KAC9BV,UAAWgB,EAAM+G,cAAc/H,cAGR,SAACkK,GAAD,MAAyB,CAChDjC,QAAS,SAACpI,EAAcH,EAAeC,EAAcC,GAA5C,OAAiEsK,EAAS1K,YAAcK,EAAMH,EAAOC,EAAMC,KACpHiG,SAAU,SAAC7F,GAAD,OAAoBkK,EAAShK,YAAaF,KACpDkF,SAAU,SAACxE,GAAD,OAAewJ,EAASzJ,YAAaC,KAC/CkJ,MAAO,SAACvJ,EAAYR,GAAb,OAA8BqK,EAAS9J,YAAUC,EAAIR,KAC5D6F,SAAU,SAAC1F,GAAD,OAAoBkK,EAASnK,YAAaC,QAG9BiK,CAA6CE","file":"static/js/10.bbd34ae4.chunk.js","sourcesContent":["import {DEL_LIB, GET_LIB_LIST, MODIFY_LIB, SELECT_LIB, SYNC_LIB, UPDATE_LIB} from \"../constants/actions\";\n\nexport interface library {\n    id: number\n    type: string\n    list: any\n    total: number\n    formValue: any\n    info: any\n    libType: string\n}\n\nfunction getListAction(libType: string, title: string, page: number, pageSize: number) {\n    return {\n        type: GET_LIB_LIST,\n        libType,\n        title,\n        page,\n        pageSize\n    }\n}\n\nfunction modifyAction(formValue: any) {\n    return {\n        type: MODIFY_LIB,\n        formValue\n    }\n}\n\nfunction updateAction(formValue: any) {\n    return {\n        type: UPDATE_LIB,\n        formValue\n    }\n}\n\nfunction delAction(id: number, libType: string) {\n    return {\n        type: DEL_LIB,\n        id: id,\n        libType\n    }\n}\n\nfunction syncAction(libType: string) {\n    return {\n        type: SYNC_LIB,\n        libType\n    }\n}\n\nfunction selectAction(info: any) {\n    return {\n        type: SELECT_LIB,\n        info\n    }\n}\n\nexport {\n    getListAction,\n    modifyAction,\n    updateAction,\n    delAction,\n    selectAction,\n    syncAction\n}","import React from \"react\";\nimport {Alert, Button, Icon, Modal, Uploader, Divider, Panel, Pagination} from \"rsuite\";\nimport {getCookie} from \"../../utils/cookie\";\nimport {DOMAIN, UPLOAD} from \"../../constants/api\";\nimport \"../../sass/library.scss\"\n\nexport interface IProps {\n    total: number\n    show: boolean\n    picList: any\n    clean: boolean\n    getPicList: (type: string, title: string, page: number, pageSize: number) => void\n    onSelect: (info: any) => void\n    onClose: (type: string) => void\n}\n\nexport default class Card extends React.Component<IProps, any> {\n    constructor(props: Readonly<IProps>) {\n        super(props);\n        this.state = {\n            page: 1,\n            searchTile: \"\",\n            upload: false,\n            loading: false,\n            selected: \"\"\n        }\n    }\n\n    componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<any>, snapshot?: any): void {\n        if (!prevProps.show && this.props.show) {\n            this.props.getPicList(\"image\", \"\", 0, 20)\n        }\n    }\n\n    close = () => {\n        this.props.onClose(\"image\")\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal backdrop={true} show={this.props.show} onHide={this.close}\n                       size=\"lg\">\n                    <Modal.Header>\n                        <Modal.Title>\n                            <span>图片素材</span>\n                        </Modal.Title>\n                        <Divider/>\n                        <Uploader className=\"upload\"\n                                  onUpload={value => {\n                                      this.setState({\n                                          upload: true,\n                                          loading: true\n                                      })\n                                  }}\n                                  onSuccess={(response: any, file) => {\n                                      if (response.code === 200) {\n                                          this.props.getPicList(\"image\", \"\", 0, 20)\n                                          Alert.success(response.message)\n                                      } else {\n                                          Alert.error(response.message)\n                                      }\n                                      this.setState({\n                                          upload: false,\n                                          loading: false\n                                      })\n                                  }}\n                                  headers={{\n                                      'Authorization': 'Bearer ' + getCookie('token') === \"undefined\" ? \"\" : getCookie(\"token\"),\n                                  }}\n                                  action={DOMAIN + UPLOAD}\n                                  data={{\"type\": \"image\"}}\n                                  fileListVisible={false}\n                                  disabled={this.state.upload}\n                        >\n                            <Button style={{background: \"#4caf50\", color: \"#ffffff\"}} loading={this.state.loading}>\n                                <Icon icon=\"plus\"/> 上传图片\n                            </Button>\n                        </Uploader>\n                    </Modal.Header>\n                    <Modal.Body style={{marginTop: 0}}>\n                        <div style={{display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\"}}>\n                            {\n                                this.props.picList.map((item: any) => {\n                                    return <Panel className=\"picItem\" key={item.id}\n                                                  style={{border: this.state.selected.id === item.id ? \"1px solid #4caf50\" : \"\"}}>\n                                        <img src={item.url} alt={item.name} height=\"145\" onClick={() => {\n                                            this.setState({\n                                                selected: item\n                                            })\n                                        }}/>\n                                        <span style={{\n                                            display: \"block\",\n                                            textAlign: \"center\",\n                                            overflow: \"hidden\"\n                                        }}>{item.name}</span>\n                                    </Panel>\n                                })\n                            }\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <div>\n                            {\n                                this.props.total > 0 ? <Pagination\n                                    activePage={this.state.page}\n                                    pages={Math.ceil(this.props.total / 20)}\n                                    maxButtons={10}\n                                    ellipsis={true}\n                                    onSelect={(page: any) => {\n                                        const more = this.props.getPicList\n                                        this.setState({\n                                            page: page\n                                        }, function () {\n                                            more(\"image\", \"\", page, 20)\n                                        })\n                                    }}\n                                /> : \"\"\n                            }\n                        </div>\n                        <Button onClick={() => {\n                            this.props.onSelect(this.state.selected)\n                            if (this.props.clean) {\n                                this.setState({\n                                    selected: false\n                                })\n                            }\n                            this.close()\n                        }} appearance=\"primary\">\n                            确定\n                        </Button>\n                        <Button onClick={this.close} appearance=\"subtle\">\n                            关闭\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport BraftEditor, {ControlType} from \"braft-editor\"\nimport 'braft-editor/dist/index.css'\nimport {\n    Button,\n    ControlLabel,\n    Form,\n    FormControl,\n    FormGroup,\n    Drawer,\n    Toggle,\n    Radio,\n    RadioGroup,\n    Input,\n    Icon\n} from \"rsuite\";\nimport \"../../sass/library.scss\"\nimport Card from \"../library-other/card\";\n\nexport interface IProps {\n    total: number\n    show: boolean,\n    selected: any,\n    picList: any,\n    formValue: any,\n    onEdit: (id: number, name: string, type: string) => void,\n    onClose: () => void,\n    onModify: (formValue: any) => void\n    onUpdate: (formValue: any) => void\n    onSelect: (info: any) => void\n    getPicList: (type: string, title: string, page: number, pageSize: number) => void\n}\n\nexport default class Edit extends React.Component<IProps, any> {\n    constructor(props: Readonly<IProps>) {\n        super(props);\n        this.state = {\n            show: true,\n            formValue: \"\",\n            showLib: false\n        }\n    }\n\n    handleFrom = (name: string, value: string) => {\n        let formValue = this.props.formValue\n        formValue[name] = value\n        this.setState({\n            formValue: formValue\n        })\n        this.props.onModify(formValue)\n    }\n\n    handleUpdate = () => {\n        let formValue = this.props.formValue\n        formValue[\"cover_pic\"] = this.props.selected.media_id\n        this.props.onUpdate(formValue)\n    }\n\n    closeLibrary = () => {\n        this.setState({\n            showLib: false\n        })\n    }\n\n    render() {\n        const controls: ControlType[] = [\"undo\", \"redo\", \"remove-styles\", \"font-size\", \"bold\", \"italic\", \"underline\", \"strike-through\", \"text-color\", \"text-align\", \"text-indent\", \"letter-spacing\", \"list-ul\", \"table\", \"blockquote\", \"hr\", \"emoji\"]\n        return (\n            <div>\n                <Drawer backdrop={true} show={this.props.show} onHide={this.props.onClose}\n                        size=\"lg\">\n                    <Drawer.Header>\n                        <Drawer.Title>新增图文素材</Drawer.Title>\n                    </Drawer.Header>\n                    <Drawer.Body>\n                        <Form fluid className=\"library-edit\">\n                            <FormGroup>\n                                <ControlLabel>标题</ControlLabel>\n                                <FormControl name=\"title\" value={this.props.formValue.title} onChange={(value) => {\n                                    this.handleFrom(\"title\", value)\n                                }}/>\n                            </FormGroup>\n                            <FormGroup>\n                                <ControlLabel>作者</ControlLabel>\n                                <FormControl name=\"author\" value={this.props.formValue.author} onChange={(value) => {\n                                    this.handleFrom(\"author\", value)\n                                }}/>\n                            </FormGroup>\n                            <FormGroup>\n                                <ControlLabel>正文</ControlLabel>\n                                <BraftEditor\n                                    controls={controls}\n                                    style={{border: \"1px solid #e5e5ea\"}}\n                                    onChange={(value) => {\n                                        this.handleFrom(\"content\", value.toHTML())\n                                    }}\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <ControlLabel>封面和摘要</ControlLabel>\n                                <Card show={this.state.showLib}\n                                      picList={this.props.picList || []}\n                                      getPicList={this.props.getPicList}\n                                      onSelect={this.props.onSelect}\n                                      total={this.props.total}\n                                      onClose={this.closeLibrary}\n                                      clean={false}\n                                />\n                                <div className=\"cover\">\n                                    <span onClick={() => {\n                                        this.setState({\n                                            showLib: true\n                                        })\n                                    }}>\n                                        {\n                                            this.props.selected.length !== 0 ?\n                                                <img src={this.props.selected.url} alt={this.props.selected.name}\n                                                     width={134} style={{verticalAlign: \"top\"}}/> :\n                                                <Icon icon=\"plus\" style={{color: \"#e5e5ea\", fontSize: \"18px\"}}/>\n                                        }\n                                        </span>\n                                    < Input\n                                        componentClass=\"textarea\"\n                                        rows={6}\n                                        placeholder=\"选填，摘要会在订阅号消息、转发链接等文章外的场景显露，帮助读者快速了解内容，如不填写则默认抓取正文前54字\"\n                                        onChange={(value) => {\n                                            this.handleFrom(\"summary\", value)\n                                        }}\n                                    />\n                                </div>\n                            </FormGroup>\n                            <FormGroup className=\"form-group-line\">\n                                <ControlLabel style={{lineHeight: \"30px\"}}>显示封面</ControlLabel>\n                                <Toggle\n                                    size='lg'\n                                    checkedChildren=\"显示\"\n                                    unCheckedChildren=\"不显示\"\n                                    defaultChecked={this.props.formValue.show_cover_pic === \"1\"}\n                                    onChange={(value) => {\n                                        this.handleFrom(\"show_cover_pic\", value ? \"1\" : \"0\")\n                                    }}\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <ControlLabel>原文地址</ControlLabel>\n                                <FormControl name=\"source_url\" value={this.props.formValue.source_url}\n                                             onChange={(value) => {\n                                                 this.handleFrom(\"source_url\", value)\n                                             }}/>\n                            </FormGroup>\n                            <FormGroup className=\"form-group-line\">\n                                <ControlLabel style={{lineHeight: \"36px\"}}>开启评论</ControlLabel>\n                                <RadioGroup name=\"comment\" defaultValue={this.props.formValue.comment || \"2\"}\n                                            onChange={(value) => {\n                                                this.handleFrom(\"comment\", value)\n                                            }}>\n                                    <Radio value=\"0\">关闭</Radio>\n                                    <Radio value=\"1\">粉丝可评论</Radio>\n                                    <Radio value=\"2\">所有人可评论</Radio>\n                                </RadioGroup>\n                            </FormGroup>\n                        </Form>\n                    </Drawer.Body>\n                    <Drawer.Footer>\n                        <Button appearance=\"primary\" onClick={this.handleUpdate}>\n                            提交\n                        </Button>\n                        <Button appearance=\"subtle\" onClick={this.props.onClose}>\n                            取消\n                        </Button>\n                    </Drawer.Footer>\n                </Drawer>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport {Button, ControlLabel, FormControl, Divider, Form, FormGroup, Icon, Table} from \"rsuite\";\nimport \"../../sass/library.scss\"\nimport Edit from \"./edit\";\n\nexport interface IProps {\n    list: any\n    picList: any\n    total: number\n    selected: any\n    formValue: any\n    getList: (type: string, title: string, page: number, pageSize: number) => void\n    onDel: (id: number, type: string) => void\n    onUpdate: (formValue: any) => void\n    onSelect: (info: any) => void\n    onModify: (formValue: any) => void\n}\n\nexport default class LibraryImgTxt extends React.Component<IProps, any> {\n    constructor(props: Readonly<IProps>) {\n        super(props);\n        this.state = {\n            page: 1,\n            searchTile: \"\",\n            show: false,\n        }\n    }\n\n    componentDidMount(): void {\n        this.props.getList(\"news\", \"\", 1, 20)\n    }\n\n    add = () => {\n        this.setState({\n            show: true,\n        })\n    }\n\n    close = () => {\n        this.setState({\n            show: false\n        })\n    }\n\n    render() {\n        const {Column, HeaderCell, Cell, Pagination} = Table;\n        const ActionCell = ({rowData, dataKey, ...props}: any) => {\n            return (\n                <Cell {...props} className=\"link-group\">\n                    <a href={rowData.url} target=\"_blank\">查看</a>\n                    <Divider vertical={true}/>\n                    <a role=\"button\" onClick={() => {\n                        this.props.onDel(rowData.id, \"image\")\n                    }}>删除</a>\n                </Cell>\n            );\n        };\n        const ImgCell = ({rowData, dataKey, ...props}: any) => {\n            return (\n                <Cell {...props}>\n                    <img height={54} src={rowData.cover_pic} alt={rowData.name}/>\n                </Cell>\n            )\n        }\n        return (\n            <div id=\"page\">\n                <Edit show={this.state.show}\n                      formValue={this.props.formValue}\n                      onEdit={this.props.onUpdate}\n                      onClose={this.close}\n                      onModify={this.props.onModify}\n                      onUpdate={this.props.onUpdate}\n                      onSelect={this.props.onSelect}\n                      getPicList={this.props.getList}\n                      picList={this.props.picList}\n                      total={this.props.total}\n                      selected={this.props.selected}\n                />\n                <div className=\"header\">\n                    <div>\n                        <Button color=\"orange\" onClick={this.add}>\n                            <Icon icon=\"plus\"/> 新增素材\n                        </Button>\n                        <Button color=\"green\">\n                            <Icon icon=\"repeat\"/> 获取已有素材\n                        </Button>\n                    </div>\n\n                    <Form layout=\"inline\">\n                        <FormGroup>\n                            <ControlLabel>标题</ControlLabel>\n                            <FormControl name=\"title\" onChange={(e) => {\n                                this.setState({\n                                    searchTitle: e\n                                })\n                            }}/>\n                        </FormGroup>\n                        <Button className=\"form-button\" appearance=\"primary\" onClick={() => {\n                            this.props.getList(\"news\", \"\", 1, 20)\n                        }}>查询</Button>\n                    </Form>\n                </div>\n                <Divider/>\n                <Table loading={false} data={this.props.list} style={{marginLeft: 25, marginRight: 25}}\n                       autoHeight={true} rowHeight={80}>\n                    <Column width={50} align=\"center\" verticalAlign=\"middle\" fixed>\n                        <HeaderCell>ID</HeaderCell>\n                        <Cell dataKey=\"id\"/>\n                    </Column>\n                    <Column flexGrow={6} align=\"center\" verticalAlign=\"middle\">\n                        <HeaderCell>标题</HeaderCell>\n                        <Cell dataKey=\"title\"/>\n                    </Column>\n                    <Column flexGrow={4} align=\"center\" verticalAlign=\"middle\">\n                        <HeaderCell>封面</HeaderCell>\n                        <ImgCell datakey=\"cover_pic\"/>\n                    </Column>\n                    <Column flexGrow={2} align=\"center\" verticalAlign=\"middle\">\n                        <HeaderCell>是否显示封面</HeaderCell>\n                        <Cell dataKey=\"show_cover_pic\"/>\n                    </Column>\n                    <Column flexGrow={3} align=\"center\" verticalAlign=\"middle\">\n                        <HeaderCell>是否开启评论</HeaderCell>\n                        <Cell dataKey=\"comment\"/>\n                    </Column>\n                    <Column flexGrow={3} align=\"center\" verticalAlign=\"middle\">\n                        <HeaderCell>创建时间</HeaderCell>\n                        <Cell dataKey=\"created_at\"/>\n                    </Column>\n                    <Column flexGrow={6} align=\"center\" verticalAlign=\"middle\">\n                        <HeaderCell></HeaderCell>\n                        <ActionCell dataKey=\"id\"/>\n                    </Column>\n                </Table>\n                {\n                    this.props.total > 0 ? <Pagination\n                        activePage={this.state.page}\n                        displayLength={20}\n                        renderLengthMenu={() => {\n                            return \"\"\n                        }}\n                        total={this.props.total}\n                        onChangePage={page => {\n                            this.props.getList(\"image\", \"\", 1, 20)\n                            this.setState({\n                                page: page\n                            })\n                        }}\n                    /> : \"\"\n                }\n            </div>\n        )\n    }\n}","import {withRouter} from \"react-router\"\nimport {Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\nimport Library from \"../../component/library-img-txt\";\nimport {delAction, getListAction, modifyAction, selectAction, updateAction} from \"../../actions/library\";\n\nconst mapStateToProps = (state: any) => ({\n    list: state.LibraryImgTxt.list,\n    picList: state.LibraryImgTxt.picList,\n    total: state.LibraryImgTxt.total,\n    selected: state.LibraryImgTxt.info,\n    formValue: state.LibraryImgTxt.formValue\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    getList: (type: string, title: string, page: number, pageSize: number) => dispatch(getListAction(type, title, page, pageSize)),\n    onUpdate: (formValue: any) => dispatch(updateAction(formValue)),\n    onSelect: (info: any) => dispatch(selectAction(info)),\n    onDel: (id: number, type: string) => dispatch(delAction(id, type)),\n    onModify: (formValue: any) => dispatch(modifyAction(formValue))\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Library))"],"sourceRoot":""}