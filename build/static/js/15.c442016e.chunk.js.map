{"version":3,"sources":["component/message/textMessage.tsx","component/message/index.tsx","container/replay/message.ts","actions/message.ts"],"names":["TextMessage","props","handleFrom","name","value","formValue","setState","onModify","handleUpdate","content","trim","messageType","message_type","onEdit","Alert","error","Input","componentClass","rows","style","width","minHeight","defaultValue","this","onChange","Button","appearance","marginTop","float","onClick","React","Component","Index","handleChange","type","info","state","getInfo","id","margin","className","padding","withRouter","connect","Message","dispatch","replyType","GET_MESSAGE","UPDATE_MESSAGE","updateAction","MODIFY_MESSAGE","modifyAction"],"mappings":"4NASqBA,E,YACjB,WAAYC,GAA0B,IAAD,8BACjC,4CAAMA,KAIVC,WAAa,SAACC,EAAcC,GACxB,IAAIC,EAAY,EAAKJ,MAAMI,UAC3BA,EAAUF,GAAQC,EAClB,EAAKE,SAAS,CACVD,UAAWA,IAEf,EAAKJ,MAAMM,SAASF,IAXa,EAcrCG,aAAe,WACX,IAAMC,EAAU,EAAKR,MAAMI,UAAUI,QAAQC,OACvCC,EAAc,EAAKV,MAAMI,UAAUO,aAAaF,OACtD,OAAKD,EAIAE,OAIL,EAAKV,MAAMY,OAAO,EAAKZ,MAAMI,YAHzBS,IAAMC,MAAM,yCACL,IALPD,IAAMC,MAAM,qDACL,IAnBsB,E,sEA4B3B,IAAD,OACL,OACI,6BACI,kBAACC,EAAA,EAAD,CACIC,eAAe,WACfC,KAAM,EACNC,MAAO,CAACC,MAAO,OAAQC,UAAW,SAClCC,aAAcC,KAAKtB,MAAMI,UAAUI,QACnCe,SAAU,SAACf,GACP,EAAKP,WAAW,UAAWO,MAGnC,kBAACgB,EAAA,EAAD,CAAQC,WAAW,UAAUP,MAAO,CAACQ,UAAW,OAAQC,MAAO,SACvDC,QAASN,KAAKf,cADtB,qB,GAzCyBsB,IAAMC,WCG1BC,G,mBACjB,WAAY/B,GAA0B,IAAD,8BACjC,4CAAMA,KAUVgC,aAAe,SAACC,GACZ,IAAI7B,EAAY,EAAKJ,MAAMkC,KAC3B9B,EAAS,aAAmB6B,EAC5B,EAAK5B,SAAS,CACVD,UAAWA,IAEf,EAAKJ,MAAMM,SAASF,IAfpB,EAAK+B,MAAQ,CACT/B,UAAW,IAHkB,E,iFAQjCkB,KAAKtB,MAAMoC,QAAQ,a,+BAYb,IAAD,OACL,OACI,yBAAKC,GAAG,QACJ,yBAAKnB,MAAO,CAACoB,OAAQ,WACjB,yBAAKC,UAAU,iBAAiBrB,MAAO,CAACsB,QAAS,gBAC7C,0BAAMD,UAA4C,SAAjCjB,KAAKtB,MAAMkC,KAAKvB,aAA0B,SAAW,GAAIiB,QAAS,WAC/E,EAAKI,aAAa,UADtB,iBAKiC,SAAjCV,KAAKtB,MAAMkC,KAAKvB,aACZ,kBAAC,EAAD,CAAaP,UAAWkB,KAAKtB,MAAMkC,KAAM5B,SAAUgB,KAAKtB,MAAMM,SACjDM,OAAQU,KAAKtB,MAAMY,SAAY,S,GAjCrCiB,IAAMC,Y,eCI1BW,sBAAWC,aAVF,SAACP,GAAD,MAAiB,CACrCD,KAAMC,EAAMQ,QAAQT,SAGG,SAACU,GAAD,MAAyB,CAChDR,QAAS,SAACH,GAAD,OAAkBW,GCHXC,EDG+BZ,ECFxC,CACHA,KAAMa,IACND,eAHR,IAAoBA,GDIhBjC,OAAQ,SAACR,GAAD,OAAoBwC,ECGhC,SAAsBxC,GAClB,MAAO,CACH6B,KAAMc,KACN3C,aDNiC4C,CAAa5C,KAClDE,SAAU,SAACF,GAAD,OAAoBwC,ECSlC,SAAsBxC,GAClB,MAAO,CACH6B,KAAMgB,IACN7C,aDZmC8C,CAAa9C,QAG9BsC,CAA6CC","file":"static/js/15.c442016e.chunk.js","sourcesContent":["import React from \"react\";\nimport {Input, Button, Alert} from \"rsuite\";\n\nexport interface IProps {\n    formValue: any\n    onModify: (formValue: any) => void\n    onEdit: (formValue: any) => void\n}\n\nexport default class TextMessage extends React.Component<IProps, any> {\n    constructor(props: Readonly<IProps>) {\n        super(props);\n\n    }\n\n    handleFrom = (name: string, value: string) => {\n        let formValue = this.props.formValue\n        formValue[name] = value\n        this.setState({\n            formValue: formValue\n        })\n        this.props.onModify(formValue)\n    }\n\n    handleUpdate = () => {\n        const content = this.props.formValue.content.trim()\n        const messageType = this.props.formValue.message_type.trim()\n        if (!content) {\n            Alert.error(\"消息内容不能为空\")\n            return false\n        }\n        if (!messageType){\n            Alert.error(\"消息类型错误\")\n            return false\n        }\n        this.props.onEdit(this.props.formValue)\n    }\n\n    render() {\n        return (\n            <div>\n                <Input\n                    componentClass=\"textarea\"\n                    rows={3}\n                    style={{width: \"100%\", minHeight: \"300px\"}}\n                    defaultValue={this.props.formValue.content}\n                    onChange={(content) => {\n                        this.handleFrom(\"content\", content)\n                    }}\n                />\n                <Button appearance=\"primary\" style={{marginTop: \"20px\", float: \"right\"}}\n                        onClick={this.handleUpdate}>提交</Button>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport TextMessage from \"./textMessage\";\nimport \"../../sass/reply.scss\"\nimport Media from \"./media\";\n\nexport interface IProps {\n    info: any\n    onEdit: (formValue: any) => void\n    onModify: (formValue: any) => void\n    getInfo: (type: string) => void\n}\n\nexport default class Index extends React.Component<IProps, any> {\n    constructor(props: Readonly<IProps>) {\n        super(props);\n        this.state = {\n            formValue: \"\"\n        }\n    }\n\n    componentDidMount(): void {\n        this.props.getInfo(\"message\")\n    }\n\n    handleChange = (type: string) => {\n        let formValue = this.props.info\n        formValue[\"message_type\"] = type\n        this.setState({\n            formValue: formValue\n        })\n        this.props.onModify(formValue)\n    }\n\n    render() {\n        return (\n            <div id=\"page\">\n                <div style={{margin: \"0 25px\"}}>\n                    <div className=\"message-header\" style={{padding: \"25px 0 15px\"}}>\n                        <span className={this.props.info.message_type === \"text\" ? \"active\" : \"\"} onClick={() => {\n                            this.handleChange(\"text\")\n                        }}>文字</span>\n                    </div>\n                    {\n                        this.props.info.message_type === \"text\" ?\n                            <TextMessage formValue={this.props.info} onModify={this.props.onModify}\n                                         onEdit={this.props.onEdit}/> : \"\"\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import {withRouter} from \"react-router\"\nimport Message from \"../../component/message\"\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {infoAction, modifyAction, updateAction} from \"../../actions/message\";\n\nconst mapStateToProps = (state: any) => ({\n    info: state.Message.info\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    getInfo: (type: string) => dispatch(infoAction(type)),\n    onEdit: (formValue: any) => dispatch(updateAction(formValue)),\n    onModify: (formValue: any) => dispatch(modifyAction(formValue))\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Message))","import {GET_MESSAGE, MODIFY_MESSAGE, UPDATE_MESSAGE} from \"../constants/actions\";\n\nexport interface message {\n    type: string\n    info: any,\n    update: boolean,\n}\n\nfunction infoAction(replyType: string) {\n    return {\n        type: GET_MESSAGE,\n        replyType\n    }\n}\n\nfunction updateAction(formValue: any) {\n    return {\n        type: UPDATE_MESSAGE,\n        formValue\n    }\n}\n\nfunction modifyAction(formValue: any) {\n    return {\n        type: MODIFY_MESSAGE,\n        formValue\n    }\n}\n\nexport {\n    infoAction,\n    updateAction,\n    modifyAction\n}"],"sourceRoot":""}